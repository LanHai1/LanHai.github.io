<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LanHai bolg</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-24T03:58:38.773Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>蓝海</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>移动端Web开发</title>
    <link href="http://yoursite.com/2019/05/24/webApp/"/>
    <id>http://yoursite.com/2019/05/24/webApp/</id>
    <published>2019-05-24T03:58:07.687Z</published>
    <updated>2019-05-24T03:58:38.773Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习移动端Web开发，还是个小白，有不对的地方请评论指导～😝 </p><p>你你你 你怎么穿了品如的衣服！</p><p>移动端Web开发属于前端开发中的一个子集，指移动设备上的Web前端开发工作，顺应着互联网和硬件的升级，在智能手机出现后，用户每天的上网方式发生了很大的改变。原本是固定的PC(Personal Computer，个人计算器)互联变成了现在的随时随地的移动互联。几乎人人都有一台自己的智能手机，时时刻刻的与世界的任何一个角落发生着联系。</p><h4 id="浅谈移动Web-与-HTML-5-不得不说的关系！"><a href="#浅谈移动Web-与-HTML-5-不得不说的关系！" class="headerlink" title="浅谈移动Web 与 (HTML 5) 不得不说的关系！"></a>浅谈移动Web 与 (HTML 5) 不得不说的关系！</h4><p>HTML 5 ，其中的数字代号“5” 表示 超文本标记语言 HTML 的版本号，也就是第五次(重大修改)。<br>HTML 5的特性：(标签语义化、本地存储(locatStorage)、网页多媒体、图形特效(Canvas、WebGL))<br>HTML 5个人常用的技术：(视口控制(Viewport)、媒体查询(@media)、音视频播放(Audio、Video))</p><h4 id="移动Web-与-原生应用的优劣势"><a href="#移动Web-与-原生应用的优劣势" class="headerlink" title="移动Web 与 原生应用的优劣势"></a>移动Web 与 原生应用的优劣势</h4><p>一、移动 Web 的优势</p><ul><li>跨平台: 网页应用运行在浏览器上，不会直接和系统打交道</li><li>开发成本低: Because 没有平台问题，开发者不需要掌握多种开发语言和框架</li><li>更容易迭代: Web应用所有的资源都在服务器，不需要用户主动安装和更新就可以实现产品的升级迭代</li></ul><p>二、移动 Web 的劣势</p><ul><li>功能有限: 因为没有和系统直接打交道所以只能使用浏览器提供的部分功能</li><li>操作体验欠佳: 由于运行在浏览器上，很多浏览器的质量参差不齐，操作体验势必有所下降</li><li>无法离线使用: 虽然 HTML 5 提供了离线存储，但是不代表客户在第一次首次访问应用的时候，本地已经存在</li><li>很难被发现: 用户获取APP的方式一般都是通过应用商店下载、APP桌面图标，而Web App 并不具备这些的条件</li></ul><p>三、 原生应用的优势</p><ul><li>功能完善: 几乎具备设备的所有功能的访问权限</li><li>体验更好: 速度快、性能高</li><li>可离线使用: 在无网络的情况下，客户也可以进行部分操作，因为原生App的所有程序代码和静态资源在用户安装app时就已经下载到了本地</li><li>发现机会高: 应用商城下载、桌面应用图标展示</li></ul><p>四、原生应用的劣势</p><ul><li>开发成本高: 有多少操作系统就得开发多少套应用程序，维护成本也会相对增加</li><li>迭代不可控: 安装首先需应用商城审核，其次需要用户即使的升级</li><li>内容限制: 应用商城审核规范条例</li></ul><h4 id="移动Web-现需解决的问题"><a href="#移动Web-现需解决的问题" class="headerlink" title="移动Web 现需解决的问题"></a>移动Web 现需解决的问题</h4><ul><li>浏览器种类太多，参差不齐<br>除了系统原生的浏览器，还有很多第三方的浏览器，而且那些第三方的浏览器对HTML 5 的支持程度不一，对网页的渲染与交互也各不相同，增加了Web前端开发的成本。不止是web前端 PC端的IE就是一个魔鬼🙂️</li><li>网速仍然是性能的瓶颈<br>在PC时代网速是困扰用户和开发者的最大难题，到了移动时代，这个问题更加被放大，很多时候开发者都需要为网页加速加载做更多的优化</li><li>多框架造成门槛高<br>不管是移动端还是PC端，框架的更新速度以及新框架的出现速度都是很快的。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在学习移动端Web开发，还是个小白，有不对的地方请评论指导～😝 &lt;/p&gt;
&lt;p&gt;你你你 你怎么穿了品如的衣服！&lt;/p&gt;
&lt;p&gt;移动端Web开发属于前端开发中的一个子集，指移动设备上的Web前端开发工作，顺应着互联网和硬件的升级，在智能手机出现后，用户每天的上网方式发生
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>定位当前地理位置</title>
    <link href="http://yoursite.com/2019/05/24/positionMap/"/>
    <id>http://yoursite.com/2019/05/24/positionMap/</id>
    <published>2019-05-24T03:50:37.337Z</published>
    <updated>2019-05-24T03:55:13.372Z</updated>
    
    <content type="html"><![CDATA[<h4 id="使用-HTML5-Geolocation-API-来构建基于地理位置的应用～"><a href="#使用-HTML5-Geolocation-API-来构建基于地理位置的应用～" class="headerlink" title="使用 HTML5 Geolocation API 来构建基于地理位置的应用～"></a>使用 HTML5 Geolocation API 来构建基于地理位置的应用～</h4><p>各种浏览器对HTML5 Geolocation 的支持<br>浏览器 | 版本 | 只支持HTTPS版本</p><table><thead><tr><th>浏览器</th><th>版本</th><th>只支持HTTPS版本</th></tr></thead><tbody><tr><td>IE</td><td>9+</td><td>-</td></tr><tr><td>Edge</td><td>12+</td><td>-</td></tr><tr><td>Firefox</td><td>3.5+</td><td>-</td></tr><tr><td>Chrome</td><td>5+</td><td>50</td></tr><tr><td>Safari</td><td>5+</td><td>39</td></tr><tr><td>iOS Safari</td><td>3.2+</td><td>10.2</td></tr><tr><td>Android Browser</td><td>2.1+</td><td>56</td></tr><tr><td>Chrome for Android</td><td>57+</td><td>5</td></tr><tr><td>UC Browser for Android</td><td>11.4+</td><td>-</td></tr></tbody></table><blockquote><p>出于安全考虑，部分浏览器只允许通过HTTPS协议使用 Geolocation API。在HTTP协议下使用Geolocation API 浏览器会抛出异常，在开发阶段，127.0.0.1和localhost 等本地域在两种协议下均可使用。</p></blockquote><p>Geolocation API 通过 navigator.geolocation 全局对象进行访问，第一次访问的时候会询问用户是否允许共享位置。</p><p>判断浏览器是否支持 Geolocation API<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 判断浏览器属否支持获取位置</span><br><span class="line">if(navigator.geolocation)&#123;</span><br><span class="line">    console.log(&quot;可以获取&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    console.log(&quot;不支持&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实例代码如下：<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    获取用户地理位置</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;点击获取位置&quot; id=&quot;btn&quot;&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        let btnBtn = document.getElementById(&apos;btn&apos;)</span><br><span class="line">        btnBtn.onclick = () =&gt; &#123; // 点击事件</span><br><span class="line">                getAdd()</span><br><span class="line">            &#125;</span><br><span class="line">            // 成功回调</span><br><span class="line">        let success = (position) =&gt; &#123;</span><br><span class="line">                console.log(`获取位置成功：$&#123;position.coords&#125;`);</span><br><span class="line">                console.log(position.coords); // 获取坐标信息</span><br><span class="line">                // coords的常用属性</span><br><span class="line">                console.log(position.coords.latitude); // 获取坐标纬度</span><br><span class="line">                console.log(position.coords.longitude); // 获取坐标经度</span><br><span class="line">                console.log(position.coords.accuracy); // 获取坐标精度，单位为米</span><br><span class="line">                console.log(position.timestamp); // 获取位置的时间戳</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            // 失败回调</span><br><span class="line">        let error = (positionErr) =&gt; &#123;</span><br><span class="line">            console.log(`获取位置失败：$&#123;positionErr.code&#125;+$&#123;positionErr.message&#125;`);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        let options = &#123;</span><br><span class="line">            enableHightAccuracy: false, // 获取高精度的位置信息，可能会增加响应时间，默认是false</span><br><span class="line">            timeout: 30000, // 设置超时时间，单位毫秒，如果到达设定的时间没获取到信息则回触发失败回调，默认值为0，无限大</span><br><span class="line">            maximumAge: 0 // 设置用户位置信息缓存的最大时间</span><br><span class="line">        &#125;</span><br><span class="line">        let getAdd = () =&gt; &#123;</span><br><span class="line">            navigator.geolocation.getCurrentPosition(success, error, options)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        // 判断浏览器属否支持获取位置</span><br><span class="line">        if(navigator.geolocation)&#123;</span><br><span class="line">            console.log(&quot;可以获取&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            console.log(&quot;不支持&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>当获取位置失败时，会调用失败回调(error函数)。返回的参数&lt;positionErr.code 标识错误的原因&gt;&lt;positionErr.message错误信息描述&gt;<br>positionErr.code 值</p><ul><li>UNKNOWN_ERROR(0): 其他错误</li><li>PERMISSION_DENIED(1): 用户拒绝分享位置信息</li><li>POSITION_UNAVAILABLE(2): 获取用户位置信息失败</li><li>TIMEOUT(3): 获取用户位置信息超时</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;使用-HTML5-Geolocation-API-来构建基于地理位置的应用～&quot;&gt;&lt;a href=&quot;#使用-HTML5-Geolocation-API-来构建基于地理位置的应用～&quot; class=&quot;headerlink&quot; title=&quot;使用 HTML5 Geoloca
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TypeScript概括</title>
    <link href="http://yoursite.com/2019/05/24/typescript/"/>
    <id>http://yoursite.com/2019/05/24/typescript/</id>
    <published>2019-05-24T03:44:37.708Z</published>
    <updated>2019-05-24T03:46:47.436Z</updated>
    
    <content type="html"><![CDATA[<h3 id="浅谈-开篇前言"><a href="#浅谈-开篇前言" class="headerlink" title="浅谈-开篇前言"></a>浅谈-开篇前言</h3><p>TypeScript是JavaScript的超集（遵循ECMAScript6语法）， 这个语言添加了基于类的面向对象编程。TypeScript作为JavaScript很大的一个语法糖，本质上是类似于css的less、sass，都是为了易于维护、开发，最后还是编译成JavaScript，只要是js可以运行的地方它都可以运行。</p><h5 id="ES是什么？ES6和ES5之间的关系？和JS和TS的关系？"><a href="#ES是什么？ES6和ES5之间的关系？和JS和TS的关系？" class="headerlink" title="ES是什么？ES6和ES5之间的关系？和JS和TS的关系？"></a>ES是什么？ES6和ES5之间的关系？和JS和TS的关系？</h5><p>简单来说ES就是一种规范，ES6和ES5就是这个规范的不同版本，JS实现了ES5，TS实现了ES6，JS和TS是客户端不同的版本。</p><h5 id="TypeScript相对于JavaScript的优势"><a href="#TypeScript相对于JavaScript的优势" class="headerlink" title="TypeScript相对于JavaScript的优势"></a>TypeScript相对于JavaScript的优势</h5><ul><li>支持 <strong>ES6</strong> 的规范</li><li>强大的 <strong>IDE</strong> 支持<br>  2.1 <strong>类型检查</strong><br><em>为变量指定类型 -&gt; 减少开发阶段的几率</em><br> 2.2 <strong>语法提示</strong><br><em>根据上下文，把所可能需要的类、变量方法、关键字都会有提示 -&gt; 提高开发效率</em><br>2.3 <strong>重构</strong><br><em>方便修改变量、方法名、文件名(IDE会自动修改) -&gt; 提高代码质量和效率</em></li><li>angular2 的开发语言<h4 id="学习TypeScript的收益"><a href="#学习TypeScript的收益" class="headerlink" title="学习TypeScript的收益"></a>学习TypeScript的收益</h4></li><li>强大的静态类型系统</li><li>完善的内部代码库</li><li>几乎所有的<strong>API</strong>都能得到准确的智能提示</li><li>可以帮助团队更好的理解架构内容的数据流向<h3 id="搭建TS开发环境"><a href="#搭建TS开发环境" class="headerlink" title="搭建TS开发环境"></a>搭建TS开发环境</h3><code>sudo npm install -g typescript</code><blockquote><p>目前的主流浏览器还不完全支持ES6的语法 所以目前想要在浏览器运行TS代码需要Compiler编译器来将TS代码转换为浏览器支持的JS代码</p></blockquote></li></ul><p><code>tsc 文件名.ts</code><br>文件名.ts -&gt; 文件名.js</p><h4 id="Type类型"><a href="#Type类型" class="headerlink" title="Type类型"></a>Type类型</h4><p><em>所有类型都是any类型的子类型</em></p><p><strong>元类型</strong>(<em>primitive types</em>)<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">number、boolean、string、null、undefined</span><br></pre></td></tr></table></figure></p><p><strong>对象类型</strong>(<em>object types</em>)<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">所有类、模块、接口、字面量</span><br></pre></td></tr></table></figure></p><h2 id="TypeScript-新特性"><a href="#TypeScript-新特性" class="headerlink" title="TypeScript 新特性"></a>TypeScript 新特性</h2><h4 id="字符串新类型"><a href="#字符串新类型" class="headerlink" title="字符串新类型"></a>字符串新类型</h4><ul><li><p>多行字符串</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log(`</span><br><span class="line">&lt;a&gt;1&lt;/a&gt;</span><br><span class="line">&lt;sapn&gt;2&lt;/span&gt;</span><br><span class="line">`)</span><br></pre></td></tr></table></figure></li><li><p>字符串模版</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let tt= 1</span><br><span class="line">console.log(`你好我叫$&#123;tt&#125;`)</span><br></pre></td></tr></table></figure></li><li><p>自动拆分字符串</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function test_n(template,name,age)&#123;</span><br><span class="line">    console.log(template)</span><br><span class="line">    console.log(name)</span><br><span class="line">    console.log(age)</span><br><span class="line">&#125;</span><br><span class="line">var myname = &quot;兰海&quot;</span><br><span class="line">var getAge = ()=&gt;&#123;</span><br><span class="line">    return 19</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">直接函数调用 函数名`` </span><br><span class="line">-&gt;会将里面的 模版string 作为第一个参数 返回一个数组[&apos;我叫&apos;,&apos;，今年&apos;,&apos;!&apos;] 根据模版字符串切割</span><br><span class="line">-&gt;第一个模版和第二个模版分别对应函数中的第二第三参数 只会返回对应的值 // 兰海  // 19</span><br><span class="line">*/</span><br><span class="line">test_n`我叫$&#123;myname&#125;，今年$&#123;getAge()&#125;!`</span><br></pre></td></tr></table></figure></li></ul><h4 id="参数新类型"><a href="#参数新类型" class="headerlink" title="参数新类型"></a>参数新类型</h4><ul><li>参数类型<blockquote><p>在参数名称后面使用冒号来指定参数的类型<br>类型推断机制 -&gt; 根据编写的值来设定该变量的参数类型<br>(自定义类型)(字符串数组类型)(数字数组类型)(元组类型)(联合类型)(显式类型)</p></blockquote></li></ul><p><em>设置参数类型 类型推断机制</em><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var myname: string = &quot;兰海&quot;</span><br><span class="line"></span><br><span class="line">//-&gt; [ts] 后续变量声明必须属于同一类型。变量“myname”必须属于类型“string”，但此处却为类型“number”。</span><br><span class="line">// 因为在前面已经定义了变量的类型 所以后续再给变量赋值必须遵循之前声明的类型</span><br><span class="line">var myname = 1; // 报错</span><br></pre></td></tr></table></figure></p><p><em>any 其他类型 -&gt; 元类型</em><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// any 所有类型都可以</span><br><span class="line">var myts1: any = 10</span><br><span class="line">myts1 = &quot;你好&quot;</span><br><span class="line"></span><br><span class="line">var myts2: boolean = true</span><br><span class="line">var myts3: string = &quot;str&quot;</span><br><span class="line">var myts4: number = 1</span><br><span class="line">var myts5: null = null</span><br><span class="line">var myts6: undefined = undefined</span><br></pre></td></tr></table></figure></p><p><em>函数返回值</em><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// :void 该函数不需要任何返回值</span><br><span class="line">function test(): void &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// :any 该函数可以返回任何类型的返回值</span><br><span class="line">function test2(): any &#123;</span><br><span class="line">    return &quot;any&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 注意除了 :void 和 :any 以外其他声明的类型 都必须return一个值</span><br><span class="line"></span><br><span class="line">// 可以规定返回值类型 string number boolean null ....</span><br><span class="line">function test3(): string &#123;</span><br><span class="line">    return &quot;1&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 还可以设置函数的 形参的类型</span><br><span class="line">function test4(x: number, y: string): string &#123;</span><br><span class="line">    return &quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line">// 在函数调用的时候 实参也必须遵循设置的类型</span><br><span class="line">test4(1,&apos;2&apos;)</span><br></pre></td></tr></table></figure></p><p><em>自定义类型</em><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    age: number;</span><br><span class="line">    name: string;</span><br><span class="line">&#125;</span><br><span class="line">var per: Person = new Person()</span><br><span class="line">per.age = 1</span><br><span class="line">per.name = &quot;兰海&quot;</span><br></pre></td></tr></table></figure></p><ul><li><p>默认参数</p><blockquote><p>在参数声明的后面用等号来指定参数的默认值<br>(在参数名称后面用 <strong>:</strong> 指定参数的<strong>类型</strong>)<br>(在参数名称后面用 <strong>=</strong> 指定参数的<strong>默认值</strong>)<br><em>注意:带默认值的参数要声明在最后面！</em></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 指定参数的默认值</span><br><span class="line">// 不传参数会报错 所以可以设置默认值</span><br><span class="line">// 带默认值的参数一定要声明在最后面！</span><br><span class="line">function test6(x:number,y:number = 2):any&#123;</span><br><span class="line">    console.log(x,y)</span><br><span class="line">    return y</span><br><span class="line">&#125;</span><br><span class="line">var ts = test6(12)</span><br><span class="line">console.log(ts)</span><br></pre></td></tr></table></figure></blockquote></li><li><p>可选参数</p><blockquote><p>在参数声明的后面用问号来指定参数为可选<br><em>注意:可选的参数要声明在最后面！默认值和可选不能同时设置，可选参数🉑️和指定参数类型一起设置</em></p></blockquote></li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 参数可选 ? 可以传递也可以不传递</span><br><span class="line">// 注意 在函数内部得处理可选参数</span><br><span class="line">// 带可选的参数一定要声明在最后面 不能同时设置可选和默认值！</span><br><span class="line">function test7(x: string, y?: number) &#123;</span><br><span class="line">    console.log(x)</span><br><span class="line">    if (y) &#123;</span><br><span class="line">        console.log(`参数已传递`)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(y,`参数未传递`)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">test7(&quot;11&quot;)</span><br><span class="line">test7(&quot;122&quot;,999)</span><br></pre></td></tr></table></figure><h4 id="函数新类型"><a href="#函数新类型" class="headerlink" title="函数新类型"></a>函数新类型</h4><ul><li><p>Rest and Spread 操作符 (…)</p><blockquote><p>用来声明任意数量的方法参数</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 用来声明任意数量的方法参数 </span><br><span class="line">// agrss -&gt; arguments 伪数组</span><br><span class="line">function ts1(...argss)&#123;</span><br><span class="line">    argss.forEach(arg =&gt; &#123;</span><br><span class="line">        console.log(arg)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">ts1(1,2,3,4,5,6)</span><br><span class="line">ts1(1,2)</span><br></pre></td></tr></table></figure></blockquote></li><li><p>generator 函数</p><blockquote><p>控制函数的执行过程，手工暂停和恢复代码执行 (* yield)</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">function* ts3() &#123;</span><br><span class="line">    console.log(&apos;start&apos;)</span><br><span class="line">    yield</span><br><span class="line">    console.log(&apos;center&apos;)</span><br><span class="line">    yield</span><br><span class="line">    console.log(&apos;end&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var ts3_3 = ts3()</span><br><span class="line">ts3_3.next() // statt</span><br><span class="line">ts3_3.next() // center</span><br><span class="line">ts3_3.next() // end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function* getStock(stock) &#123;</span><br><span class="line">    while (true) &#123;</span><br><span class="line">        yield Math.random() * 100</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var stockGenerator = getStock(&apos;BaiDu&apos;)</span><br><span class="line">var limPrice = 15</span><br><span class="line">var price = 100</span><br><span class="line">// 当返回的值大于15会一直循环 小于15就会停止循环</span><br><span class="line">while (price &gt; limPrice) &#123;</span><br><span class="line">    price = stockGenerator.next().value</span><br><span class="line">    console.log(`the generator return $&#123;price&#125;`)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>destructuring析构表达式</p><blockquote><p>通过表达式将对象或数组拆解成任意数量的变量<br>直接将对象里对应名称的变量定义和赋值到外部</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// var &#123;a,b&#125; = 对象 直接将对象里对应名称的变量定义和赋值到外部</span><br><span class="line">// 注意 析构表达式里面的变量要和对象里面的变量的名字是相同的</span><br><span class="line">function ts6() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        name_t: &apos;蓝海&apos;,</span><br><span class="line">        age: 18</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var &#123; name_t, age &#125; = ts6()</span><br><span class="line">console.log(name)</span><br><span class="line">console.log(age)</span><br><span class="line"></span><br><span class="line">// 如果需要后续自定义变量名</span><br><span class="line">var &#123; name_t: myname, age &#125; = ts6()</span><br><span class="line">console.log(myname)</span><br><span class="line">console.log(age);</span><br></pre></td></tr></table></figure></blockquote></li></ul><p><em>嵌套变量取值</em><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 取嵌套属性</span><br><span class="line">var obj = &#123;</span><br><span class="line">    t1: &apos;睡觉睡觉&apos;,</span><br><span class="line">    t2: &#123;</span><br><span class="line">        ts2_1: &quot;其擦好&quot;,</span><br><span class="line">        ts2_2: &quot;好的&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var &#123; t1, t2: &#123; ts2_2 &#125; &#125; = obj</span><br><span class="line">console.log(t1)</span><br><span class="line">console.log(ts2_2)</span><br></pre></td></tr></table></figure></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// var [1,2,3,4] = 数组 直接将数组里对应名称的变量定义和赋值到外部</span><br><span class="line">var arr = [1, 2, 3, 4]</span><br><span class="line">var [num1, num2] = arr</span><br><span class="line">console.log(num1, num2) // 1 2</span><br><span class="line"></span><br><span class="line">var [, , num1, num2] = arr</span><br><span class="line">console.log(num1, num2) // 3 4</span><br><span class="line"></span><br><span class="line">var [num1, , , num2] = arr // 1 4</span><br><span class="line">console.log(num1, num2)</span><br><span class="line"></span><br><span class="line">var [num1, , num2] = arr // 1 3</span><br><span class="line">console.log(num1, num2)</span><br><span class="line"></span><br><span class="line">var [num1, num2, ...other] = arr</span><br><span class="line">console.log(num1, num2, other) // 1 2 arr[3,4]</span><br></pre></td></tr></table></figure><p><em>析构表达式 结合 Rest and Spread 操作符</em><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4]</span><br><span class="line">function getArr([num1, num2, ...other]) &#123;</span><br><span class="line">    console.log(num1, num2, other)</span><br><span class="line">&#125;</span><br><span class="line">getArr(arr)</span><br></pre></td></tr></table></figure></p><h4 id="表达式和循环"><a href="#表达式和循环" class="headerlink" title="表达式和循环"></a>表达式和循环</h4><ul><li>箭头函数<blockquote><p>用来声明匿名函数，消除传统匿名函数的this指针问题(setInterval)</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var arr = (ag1, ag2) =&gt; ag1 + ag2</span><br><span class="line"></span><br><span class="line">var retarr = arr(1, 2)</span><br><span class="line">console.log(retarr) // 3</span><br><span class="line"></span><br><span class="line">var myarr: Array&lt;number&gt; = [1, 2, 3, 4, 5]</span><br><span class="line"></span><br><span class="line">console.log(myarr.filter(value =&gt; value % 2 == 0)) // arr[2,4]</span><br></pre></td></tr></table></figure></blockquote></li></ul><p><em>解决this指向</em><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var arr_n = (name_n) =&gt; &#123;</span><br><span class="line">    this.name_n = name_n</span><br><span class="line">    setInterval(() =&gt; &#123;</span><br><span class="line">        console.log(`name is:$&#123;this.name_n&#125;`) // 这里的thi还是全局的this 并不是函数的this</span><br><span class="line">    &#125;, 1000)</span><br><span class="line">&#125;</span><br><span class="line">arr_n(&quot;兰海&quot;)</span><br></pre></td></tr></table></figure></p><ul><li>循环<blockquote><p>forEach()、for in、for of</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// for of 可以打印字符串</span><br><span class="line">var arr_ss = []</span><br><span class="line">for (const iterator of &quot;我是一个字符串&quot;) &#123;</span><br><span class="line">    arr_ss.push(iterator)</span><br><span class="line">    console.log(iterator)</span><br><span class="line">&#125;</span><br><span class="line">console.log(arr_ss) //  [&quot;我&quot;, &quot;是&quot;, &quot;一&quot;, &quot;个&quot;, &quot;字&quot;, &quot;符&quot;, &quot;串&quot;]</span><br></pre></td></tr></table></figure></blockquote></li></ul><h2 id="面向对象特性"><a href="#面向对象特性" class="headerlink" title="面向对象特性"></a>面向对象特性</h2><h4 id="类-class"><a href="#类-class" class="headerlink" title="类(class)"></a>类(class)</h4><blockquote><p>类是TypeScript的核心，使用TypeScript平时是，大部分代码都写在类里面<br>(类的定义、构造函数、类的继承)</p></blockquote><ul><li>访问控制符<br><code>public</code> ：类的内部外部都能访问(默认)<br><code>private</code> ：只能在类的内部访问(私有的)<br><code>protected</code> ：能在类的内部和子类(继承)中使用(受保护的)</li><li><p>类的构造函数</p><blockquote><p>constructor(){} 不能在外部访问到，只有在类的实例化的时候才会被调用(1次)<br><em>用途:该类实例化的时候必须带某个参数</em></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class person &#123;</span><br><span class="line">    // 构造函数 </span><br><span class="line">    // 该类实例化的时候必须带ages 属性</span><br><span class="line">    constructor(public ages:number)&#123; // 在构造函数上必须明确声明访问控制符</span><br><span class="line">        this.ages = ages </span><br><span class="line">        console.log(`只会在实例化过后执行一次`)</span><br><span class="line">    &#125;</span><br><span class="line">    public name_n; // public 公开的 默认</span><br><span class="line">    private food; // prevate 私有的 只能在类的内部访问</span><br><span class="line">    protected eat() &#123; // protected 受保护的 只能在类的内部和子类&#123;继承&#125;中使用</span><br><span class="line">        console.log(`$&#123;this.name_n&#125;在吃$&#123;this.food&#125;`)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var per1: person = new person(1)</span><br><span class="line">per1.name_n = &quot;兰海&quot;</span><br><span class="line">console.log(per1.ages)</span><br></pre></td></tr></table></figure></blockquote></li><li><p>类的继承</p><blockquote><p>子类 extends 父类<br>super() 调用父类的构造函数<br>super.fn() 调用父类的方法</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class persons &#123;</span><br><span class="line">    // 必须传入名字</span><br><span class="line">    constructor(public name_n: string) &#123;</span><br><span class="line">        this.name_n = name_n</span><br><span class="line">        console.log(`haha`)</span><br><span class="line">    &#125;</span><br><span class="line">    private age: number;</span><br><span class="line">    public eat() &#123;</span><br><span class="line">        console.log(`$&#123;this.name_n&#125;在吃东西`)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// extends 继承来的函数不能声明构造器 可以使用super()</span><br><span class="line">class student extends persons &#123;</span><br><span class="line">    constructor(name_n: string) &#123;</span><br><span class="line">        super(name_n) // 调用父类的构造函数 并执行函数</span><br><span class="line">    &#125;</span><br><span class="line">    public sex: string</span><br><span class="line">    public work() &#123;</span><br><span class="line">        super.eat() // 调用父类的函数(方法)</span><br><span class="line">        console.log(`工作$&#123;super.name_n&#125;`)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var stu = new student(&quot;兰海&quot;);</span><br><span class="line">stu.eat()</span><br><span class="line">stu.work()</span><br></pre></td></tr></table></figure></blockquote></li></ul><h4 id="泛型-generic"><a href="#泛型-generic" class="headerlink" title="泛型(generic)"></a>泛型(generic)</h4><blockquote><p>参数化的类型，一般用来限制集合(数组)里面值的数据类型<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 尖括号里面的就是泛型 规定arr数组里面的值只能是number类型</span><br><span class="line">var arr: Array&lt;number&gt; = new Array()</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="接口-Interface"><a href="#接口-Interface" class="headerlink" title="接口(Interface)"></a>接口(Interface)</h4><blockquote><p>用来建立某种代码约定，使得其它开发者在调用某个方法或创建新的类时必须遵循接口所定义的代码约定</p><ul><li>接口Interface 用户规定参数的类型</li><li>implements 实现某接口的类 必须实现该接口中的方法<figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// interface 规定参数的类型</span><br><span class="line">interface IPerson &#123;</span><br><span class="line">    name_n: string,</span><br><span class="line">    age?: number</span><br><span class="line">&#125;</span><br><span class="line">class Person &#123;</span><br><span class="line">    constructor(public config: IPerson) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var p1 = new Person(&#123;</span><br><span class="line">    name_n: &quot;兰&quot;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// implements 实现某接口的类，必须实现该接口中的方法</span><br><span class="line">interface Ipers&#123;</span><br><span class="line">    eat();</span><br><span class="line">&#125;</span><br><span class="line">class per implements Ipers &#123;</span><br><span class="line">    eat()&#123;</span><br><span class="line">        console.log(`实现接口中的方法`)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h4 id="模块-Module"><a href="#模块-Module" class="headerlink" title="模块(Module)"></a>模块(Module)</h4><blockquote><p>模块可以帮助开发者将代码分割为可重用的单元，开发者可以自己决定将模块中的哪些资源(类、方法、变量)暴露出去供外部使用，一个文件就是一个方法</p></blockquote><ul><li><code>export</code> 对外暴露</li><li><code>import</code> 引入<h4 id="注释-annotation"><a href="#注释-annotation" class="headerlink" title="注释(annotation)"></a>注释(annotation)</h4><blockquote><p>注解为程序的元素(类、方法、变量)加上更直观更明了的说明，这些说明信息与程序的业务逻辑无关，而是供指定的工具或框架使用的</p></blockquote><h4 id="类型定义文件-d-ts"><a href="#类型定义文件-d-ts" class="headerlink" title="类型定义文件(*.d.ts)"></a>类型定义文件(*.d.ts)</h4><blockquote><p>类型定义文件用来帮助开发者在TypeScript中使用已有的js工具包如果:jquery</p></blockquote></li></ul><p><code>npm install @types/jquery</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>TypeScript的好处很明显，在编译的时候就能检查出很多语法问题，而不是在运行后，不过由于ts是基于类的面向对象编程，如果是纯前端的人员(没有后端的语言基础)，那么用起来会比较吃力。</p><p><img src="https://upload-images.jianshu.io/upload_images/12946880-e55d8a924b377a8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="xmind知识导图"></p><h4 id="极致的代码提示"><a href="#极致的代码提示" class="headerlink" title="极致的代码提示"></a>极致的代码提示</h4><h4 id="极致的检查错误"><a href="#极致的检查错误" class="headerlink" title="极致的检查错误"></a>极致的检查错误</h4><h4 id="极致的代码重构"><a href="#极致的代码重构" class="headerlink" title="极致的代码重构"></a>极致的代码重构</h4><h4 id="极致的模块管理"><a href="#极致的模块管理" class="headerlink" title="极致的模块管理"></a>极致的模块管理</h4><h4 id="极致的JS支持"><a href="#极致的JS支持" class="headerlink" title="极致的JS支持"></a>极致的JS支持</h4><h4 id="极致的ES6"><a href="#极致的ES6" class="headerlink" title="极致的ES6"></a>极致的ES6</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;浅谈-开篇前言&quot;&gt;&lt;a href=&quot;#浅谈-开篇前言&quot; class=&quot;headerlink&quot; title=&quot;浅谈-开篇前言&quot;&gt;&lt;/a&gt;浅谈-开篇前言&lt;/h3&gt;&lt;p&gt;TypeScript是JavaScript的超集（遵循ECMAScript6语法）， 这个语言添加了
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>html5+css3+基础JavaScript语法题</title>
    <link href="http://yoursite.com/2019/05/24/css3html5jsTopic/"/>
    <id>http://yoursite.com/2019/05/24/css3html5jsTopic/</id>
    <published>2019-05-24T03:43:00.075Z</published>
    <updated>2019-05-24T03:43:58.367Z</updated>
    
    <content type="html"><![CDATA[<p>一些很重要的点 都通过注释写在了代码里面</p><ul><li><p>求以下的i输出多少?</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var i = 10; // 全局作用域的this 是window</span><br><span class="line">function demo() &#123;</span><br><span class="line">    i = 20; // 函数中未写关键字直接赋值 i为全局变量 </span><br><span class="line">    for (var i = 0; i &lt; 10; i++) &#123; // 执行 10 次 当第十次的时候 i = 10 </span><br><span class="line">    //进行条件判断为false 跳出循环 (var 关键词 变量名相同 向上覆盖)</span><br><span class="line">        console.log(i); // 0 1 2 3 4 5 6 7 8 9</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for 循环 拆构</span><br><span class="line">    var i = 0；</span><br><span class="line">    for (; i &lt; 10;) &#123;</span><br><span class="line">        代码块</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    console.log(i); // 10</span><br><span class="line">    console.log(this.i); // 10 函数中的this 是 window</span><br><span class="line">&#125;;</span><br><span class="line">demo();</span><br><span class="line">console.log(i); // 10</span><br></pre></td></tr></table></figure></li><li><p>求以下输出的值</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    age: 18</span><br><span class="line">&#125;;</span><br><span class="line">// (&apos;age&apos; in obj) =&gt; 判断obj对象中是否存在age属性名 //true</span><br><span class="line">if (!(&apos;age&apos; in obj)) &#123; // ! 取反 (!true)=&gt; false </span><br><span class="line">    var a = 20</span><br><span class="line">    console.log(a)</span><br><span class="line">&#125; // 不会输入任何值</span><br></pre></td></tr></table></figure></li><li><p>arr的值为?</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,1,3,5,9]</span><br><span class="line">// 第一个参数 索引值-&gt;下标</span><br><span class="line">// 第二个参数是 从索引值开始删除几个元素</span><br><span class="line">arr.splice(1,1) // [1,1,3,5,9]</span><br></pre></td></tr></table></figure></li><li><p>请写出以下结果</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var name = &apos;hello window&apos;;</span><br><span class="line">var obj = &#123;</span><br><span class="line">    name: &quot;objName&quot;,</span><br><span class="line">    getName: function () &#123;</span><br><span class="line">        // this.name =&gt; obj.name </span><br><span class="line">        console.log(this.name) // 这里的this是这个对象obj this-&gt;当前作用域</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.getName(); //打印什么? //“objName”</span><br><span class="line">// 两个等于对比值 </span><br><span class="line">//          obj.name == window.name</span><br><span class="line">//          &quot;objName&quot; == &quot;hello window&quot;</span><br><span class="line">console.log(obj.getName() == name); // false or true // false</span><br></pre></td></tr></table></figure></li><li><p>将var str = [‘a’,’b’,’c’,3,4,5,’e’,’f’,’g’,’a’,’b’,’c’,’a’,’b’],写出3条js语句实现以下3个功能</p></li><li><p>去掉数组中的a,b,c字符,得出结果345efg ;</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, 3, 4, 5, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;a&apos;, &apos;b&apos;]</span><br><span class="line"></span><br><span class="line">function splice_abc(str) &#123;</span><br><span class="line">    // 正叙循环有可能删不干净 -&gt; 删除一个后 数组的长度就会改变 每个元素的索引值也会改变</span><br><span class="line">    for (let index = str.length; index &gt;= 0; index--) &#123; // 倒叙循环 </span><br><span class="line">        if (str[index] == &apos;a&apos; || str[index] == &apos;b&apos; || str[index] == &apos;c&apos;) &#123;</span><br><span class="line">            str.splice(index, 1)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return str</span><br><span class="line">&#125;</span><br><span class="line">console.log(splice_abc(arr))</span><br></pre></td></tr></table></figure></li><li><p>将数组中的数字用中括号括起来,得出结果abc[3][4][5]efgabcab;</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, 3, 4, 5, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;a&apos;, &apos;b&apos;]</span><br><span class="line"></span><br><span class="line">function parentheses(str) &#123;</span><br><span class="line">    let new_str = &apos;&apos;;</span><br><span class="line">    for (let index = 0; index &lt; str.length; index++) &#123;</span><br><span class="line">        if (typeof str[index] == &quot;number&quot;) &#123; // 判断 该元素是否为 数字类型</span><br><span class="line">            str[index] = `[$&#123;str[index]&#125;]`</span><br><span class="line">        &#125;</span><br><span class="line">        new_str += str[index]</span><br><span class="line">    &#125;</span><br><span class="line">    return new_str</span><br><span class="line">&#125;</span><br><span class="line">console.log(parentheses(arr))</span><br></pre></td></tr></table></figure></li><li><p>将数组中的数字都乘以2,得出结果 abc6810efgabcab;</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, 3, 4, 5, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;a&apos;, &apos;b&apos;]</span><br><span class="line"></span><br><span class="line">function mult(str) &#123;</span><br><span class="line">    let new_str = &apos;&apos;</span><br><span class="line">    for (let index = 0; index &lt; str.length; index++) &#123;</span><br><span class="line">        if (typeof str[index] == &quot;number&quot;) &#123; // 判断 该元素是否为 数字类型</span><br><span class="line">            str[index] = str[index] * 2</span><br><span class="line">        &#125;</span><br><span class="line">        new_str += str[index]</span><br><span class="line">    &#125;</span><br><span class="line">    return new_str</span><br><span class="line">&#125;</span><br><span class="line">console.log(mult(arr))</span><br></pre></td></tr></table></figure></li><li><p>css的选择器有哪些?优先级是怎样的?<br>选择器有：{<br>基础选择器<img src="https://upload-images.jianshu.io/upload_images/12946880-09e0d6d617479259.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>组合选择器<img src="https://upload-images.jianshu.io/upload_images/12946880-b4ac92507d328d6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>属性选择器(个人最常用的)<img src="https://upload-images.jianshu.io/upload_images/12946880-0da45104b94f9b78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>伪类选择器<img src="https://upload-images.jianshu.io/upload_images/12946880-80abd55cf83ef71b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>伪元素选择器<img src="https://upload-images.jianshu.io/upload_images/12946880-40356635096e7bba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p></li></ul><p>}<br>优先级：(从上到下)<br>!important<br>内联(1,0,0,0) 1000<br>id: (0,1,0,0) 100<br>类：(0,0,1,0) 10<br>伪类/属性<br>元素：(0,0,0,1) 1<br>通配符</p><ul><li>标准盒模型和怪异盒模型有什么区别?<br>标准盒模型: 一个块的总宽度 = width+padding 左右+margin 左右 + border 左右<br>怪异盒模型: 一个块的总宽度 = width + margin 左右<br>box-sizing:border-box<br>手机端用的更多 pc端也不少 </li><li>将一个不定宽高的盒子设置水平垂直居中  方法越多越好</li><li><p>通过 定位加 translate 无需手动计算值</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.con &#123;</span><br><span class="line">    width: 500px;</span><br><span class="line">    height: 500px;</span><br><span class="line">    background-color: coral;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cent &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: hotpink;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 50%;</span><br><span class="line">    top: 50%;</span><br><span class="line">    transform: translate(-50%, -50%)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过定位加上 手动计算 设置margin</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.con &#123;</span><br><span class="line">    width: 500px;</span><br><span class="line">    height: 500px;</span><br><span class="line">    background-color: coral;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cent &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: hotpink;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 50%;</span><br><span class="line">    top: 50%;</span><br><span class="line">    margin-top: -50px;</span><br><span class="line">    margin-left: -50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>父盒子设置为弹性盒子 水平居中 垂直居中属性</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.con &#123;</span><br><span class="line">    width: 500px;</span><br><span class="line">    height: 500px;</span><br><span class="line">    background-color: coral;</span><br><span class="line">    display: flex;</span><br><span class="line">    /* 弹性盒子 */</span><br><span class="line">    justify-content: center;</span><br><span class="line">    /* 水平居中 */</span><br><span class="line">    align-items: center;</span><br><span class="line">    /*垂直居中*/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cent &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: hotpink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将元素转换为表格特性</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.con &#123;</span><br><span class="line">    width: 500px;</span><br><span class="line">    height: 500px;</span><br><span class="line">    background-color: coral;</span><br><span class="line">    display: table-cell;</span><br><span class="line">    /* 作为一个表格单元格显示 td th*/</span><br><span class="line">    text-align: center;</span><br><span class="line">    /*文本居中*/</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cent &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: hotpink;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    /* 行类块元素*/</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    /*把此元素放置在父元素的中部*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;con&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;cent&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li><p>实现以下布局   左边固定宽度200px  右边自适应</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .content &#123;</span><br><span class="line">            position: fixed;</span><br><span class="line">            left: 0;</span><br><span class="line">            top: 0;</span><br><span class="line">            right: 0;</span><br><span class="line">            bottom: 0;</span><br><span class="line">            display: flex;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .left &#123;</span><br><span class="line">            height: 100%;</span><br><span class="line">            width: 200px;</span><br><span class="line">            background-color: blueviolet;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .main &#123;</span><br><span class="line">            flex: 1;</span><br><span class="line">            background-color: brown;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 实现以下布局   左边固定宽度200px  右边自适应 --&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>用过哪些h5c3的新特性?<br>语义化的标签、表单的很多新属性、音屏、视频、canvas、webstorage、websocket、地理位置</p></li><li><p>封装一个函数,实现求最大值和最小值.</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// 封装一个函数,实现求最大值和最小值.</span><br><span class="line">function getMaxMin(arr, fn) &#123;</span><br><span class="line">    let max = min = arr[0]</span><br><span class="line">    let type = typeof arr[0] == &quot;string&quot; // 判断数组的第一个元素是否为字符串</span><br><span class="line">    if (!fn) throw new Error(&apos;fn is no incoming&apos;) // 抛异常</span><br><span class="line">    for (let index = 0; index &lt; arr.length; index++) &#123;</span><br><span class="line">        if (type ? fn(max, arr[index]) &lt; 0 : arr[index] &gt; max) &#123;</span><br><span class="line">            max = arr[index]</span><br><span class="line">        &#125;</span><br><span class="line">        if (type ? fn(min, arr[index]) &gt; 0 : arr[index] &lt; min) &#123;</span><br><span class="line">            min = arr[index]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">        max,</span><br><span class="line">        min</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 兼容代码 字符串做比较</span><br><span class="line">function jr(str1, str2) &#123;</span><br><span class="line">    if (str1.length &gt; str2.length) &#123;</span><br><span class="line">        return 1</span><br><span class="line">    &#125; else if (str1.length &lt; str2.length) &#123;</span><br><span class="line">        return -1</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return 0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let arr_n = [1, 2, 3, 4, 1, 2, 4, 8]</span><br><span class="line">let obj = getMaxMin(arr_n, jr)</span><br><span class="line">console.log(obj.max, obj.min)</span><br><span class="line"></span><br><span class="line">let arr = [&quot;sdas&quot;, &quot;sdsss&quot;, &quot;22&quot;, &quot;bsjbdjasdbsaj&quot;, &quot;1&quot;]</span><br><span class="line">let obj1 = getMaxMin(arr, jr)</span><br><span class="line">console.log(obj1.max, obj1.min)</span><br></pre></td></tr></table></figure></li><li><p>封装一个排序</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function sort_n(arr) &#123;</span><br><span class="line">    for (let row = 0; row &lt; arr.length; row++) &#123;</span><br><span class="line">        for (let index = 0; index &lt; arr.length - row; index++) &#123;</span><br><span class="line">            if (arr[index] &gt; arr[index + 1]) &#123;</span><br><span class="line">                let temp = arr[index]</span><br><span class="line">                arr[index] = arr[index + 1]</span><br><span class="line">                arr[index + 1] = temp</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let arr = [1, 2, 5, 6, 8, 4]</span><br><span class="line">console.log(sort_n(arr))</span><br></pre></td></tr></table></figure></li><li><p>控制台会输出什么,为什么会这样输出</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 声明的函数名、对象名、数组名 在内存中 存放在栈里面</span><br><span class="line">// 通过内存地址相关联</span><br><span class="line">// 函数体和形参列表、对象体、数组值 存放在堆里面</span><br><span class="line">// 复杂数据类型的变量与变量之间的赋值 不是直接将数据复制一份到变量中 是将内存地址复制一份给变量</span><br><span class="line">var a = &#123;age:18&#125;;</span><br><span class="line">var b = a;</span><br><span class="line">a.age = 15;</span><br><span class="line">console.log(b.age) // 15</span><br></pre></td></tr></table></figure></li><li><p>null 和 undefined的区别?<br>null 表示一个值被定义了 定义为“null”<br>undefined 表示一个值被声明了 但是未赋值<br>所以设置一个值为null是合理的 设置一个值为undefined是不合理的<br>null == undefined (true)<br>null === undefined (false) =&gt; 值相同 (boolean转换都为0) 但是数据类型不同</p></li><li><p>执行这段代码,输出的结果</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function test()&#123;</span><br><span class="line">console.log(a); // undefined</span><br><span class="line"></span><br><span class="line">console.log(foo()); // 2</span><br><span class="line">var a = 1;</span><br><span class="line">function foo()&#123;</span><br><span class="line">return 2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line">// 预解析 声明是函数和变量都会提升到作用域的最上面</span><br><span class="line">//     函数会将整个函数代码都提升</span><br><span class="line">//     变量只会提升变量的声明</span><br><span class="line">function test()&#123;</span><br><span class="line">var a;</span><br><span class="line">console.log(a); // undefined</span><br><span class="line">function foo()&#123;</span><br><span class="line">return 2;</span><br><span class="line">&#125;</span><br><span class="line">console.log(foo()) // 2</span><br><span class="line">a = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>请使用三元表达式完成下列判断</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line">if(a &lt; 1)&#123;</span><br><span class="line">  a = 0</span><br><span class="line">&#125;else&#123;</span><br><span class="line">  a = 2</span><br><span class="line">&#125;</span><br><span class="line">// : 前面的为true ，: 后面的为false</span><br><span class="line">var a = a&lt;1?0:2</span><br></pre></td></tr></table></figure></li><li><p>实现数组去重   方法越多越好<br>var a = [1,3,4,6,1,1,9,4,3]</p><ul><li>双循环 -&gt;效率不高<figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function getN(arr) &#123;</span><br><span class="line">    let now = [arr[0]] // 新数组 -&gt; 将传递进来的数组第一个元素push进去</span><br><span class="line">    for (let index = 0; index &lt; arr.length; index++) &#123; // 循环传递进来的数组</span><br><span class="line">        let flag = true // 声名一个flag 用来判断是否重复</span><br><span class="line">        for (let i = 0; i &lt; now.length; i++) &#123; // 循环新数组 </span><br><span class="line">            if (arr[index] === now[i]) &#123; // 判断是否有一样的元素</span><br><span class="line">                flag = false </span><br><span class="line">                break</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (flag) &#123;</span><br><span class="line">            now.push(arr[index]) </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return now</span><br><span class="line">&#125;</span><br><span class="line">console.log(getN([1, 2, 11, 2, 1, 2, 5, 22, 11, 545, 12]))</span><br></pre></td></tr></table></figure></li></ul></li><li><p>es6新方法</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// es6 新提供的方法</span><br><span class="line">// Set 数据不重复</span><br><span class="line">function es6_set(arr) &#123;</span><br><span class="line">    return new Set(arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(es6_set([1, 2, 11, 2, 1, 2, 5, 22, 11, 545, 12]))</span><br></pre></td></tr></table></figure></li><li><p>indexof</p></li><li>布局中,造成盒子margin塌陷的原因是什么? 怎么解决塌陷问题?<br>Margin 塌陷 是什么？<br>当父元素包裹着子元素(都为block块级元素)，当给子元素设置margin-top时。子元素没有位移 反而父元素位移了<br>如何解决？<br>给父元素 加border<br>给父元素 溢出隐藏 overflow: hidden;<br>给父元素 加浮动<br>给父元素 设置 display:table<br>给父元素 设置 position:fixed<br>给子元素 设置 display:inline-block<br>通过伪元素来解决margin塌陷</li><li>如何清除浮动? 方法越多越好<br>额外标签法 在浮动标签的后面添加一个元素 该元素设置 clear:both<br>使用overflow 给父盒子设置 overflow:hidden<br>伪元素清除浮动<br>双伪元素清除浮动<br><a href="https://www.jianshu.com/p/25766fe5b34f" target="_blank" rel="noopener">https://www.jianshu.com/p/25766fe5b34f</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一些很重要的点 都通过注释写在了代码里面&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;求以下的i输出多少?&lt;/p&gt;
&lt;figure class=&quot;hljs highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>祝福墙案例分析</title>
    <link href="http://yoursite.com/2019/05/24/BlessingWall/"/>
    <id>http://yoursite.com/2019/05/24/BlessingWall/</id>
    <published>2019-05-24T03:00:29.801Z</published>
    <updated>2019-05-24T03:01:20.328Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/12946880-029fad5e0f7d3e9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/12946880-fa4ec6e3ef9ea312.GIF?imageMogr2/auto-orient/strip" alt="git无法加载无关紧要 可直接在git上下载demo"></p><p><a href="https://github.com/LanHai1/blessingWall" target="_blank" rel="noopener">github网址-&gt;可直接下载demo</a><br>使用到了的技术有:本地存储、随机数、事件托管、事件处理、节点找元素、动态添加元素<br>扩展内容:(Chrome浏览器)今天在写input:button的时候 给元素加高度 突然就失效了 高度无法设置 查资料 是私有属性的问题 需要为元素添加 <code>-webkit-appearance: button;</code> 即可<br><code>样式和结构不做过多说明了</code><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">            outline: none;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        body &#123;</span><br><span class="line">            background: url(&quot;images/bg.gif&quot;);</span><br><span class="line">            font: 12px &quot;simsun&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .content &#123;</span><br><span class="line">            width: 960px;</span><br><span class="line">            height: 627px;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">            background: url(&quot;images/content_bg.jpg&quot;);</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .clearfix &#123;</span><br><span class="line">            *zoom: 1;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .clearfix:before,</span><br><span class="line">        .clearfix:after &#123;</span><br><span class="line">            content: &apos;&apos;;</span><br><span class="line">            display: table;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .clearfix:after &#123;</span><br><span class="line">            clear: both;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .tip &#123;</span><br><span class="line">            width: 227px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 100px;</span><br><span class="line">            left: 200px;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .tip-h &#123;</span><br><span class="line">            padding-top: 50px;</span><br><span class="line">            background: url(&quot;images/tip1_h.gif&quot;) no-repeat;</span><br><span class="line">            cursor: default;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .text &#123;</span><br><span class="line">            float: left;</span><br><span class="line">            padding-left: 10px;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .close &#123;</span><br><span class="line">            float: right;</span><br><span class="line">            margin-right: 10px;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .tip-m &#123;</span><br><span class="line">            min-height: 40px;</span><br><span class="line">            padding: 0 10px;</span><br><span class="line">            padding-top: 10px;</span><br><span class="line">            background: url(&quot;images/tip1_c.gif&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .tip-f &#123;</span><br><span class="line">            height: 53px;</span><br><span class="line">            background: url(&quot;images/tip1_f.gif&quot;);</span><br><span class="line">            padding-top: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .icon &#123;</span><br><span class="line">            float: left;</span><br><span class="line">            padding-left: 10px;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .name &#123;</span><br><span class="line">            float: right;</span><br><span class="line">            padding-right: 10px;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .submit_con &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            z-index: 9999;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">            background-color: rgba(0, 0, 0, 0.5);</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .submit_con&gt;.con_s &#123;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 50%;</span><br><span class="line">            left: 50%;</span><br><span class="line">            transform: translate(-50%, -50%);</span><br><span class="line">            border-radius: 5px;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            background-color: #e8deff;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        #text_con &#123;</span><br><span class="line">            resize: none;</span><br><span class="line">            border: none;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 200px;</span><br><span class="line">            border-radius: 5px;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">            padding: 10px;</span><br><span class="line">            background-color: none;</span><br><span class="line">            background-color: #ded4f3c2;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        #name_con &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 30px;</span><br><span class="line">            line-height: 30px;</span><br><span class="line">            border: 0;</span><br><span class="line">            float: right;</span><br><span class="line">            border-radius: 5px;</span><br><span class="line">            padding-left: 10px;</span><br><span class="line">            margin: 30px 10px;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        #submit &#123;</span><br><span class="line">            width: 40px;</span><br><span class="line">            -webkit-appearance: button;</span><br><span class="line">            height: 30px;</span><br><span class="line">            background-color: #fff;</span><br><span class="line">            border: 0;</span><br><span class="line">            border-radius: 5px;</span><br><span class="line">            margin: 30px 20px;</span><br><span class="line">            float: right;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            font-size: 12px;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .addMessage &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            width: 60px;</span><br><span class="line">            height: 60px;</span><br><span class="line">            font-size: 12px;</span><br><span class="line">            line-height: 60px;</span><br><span class="line">            border-radius: 50%;</span><br><span class="line">            text-align: center;</span><br><span class="line">            z-index: 999;</span><br><span class="line">            background-color: #9466FF;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">            top: 10px;</span><br><span class="line">            left: 10px;</span><br><span class="line">            color: #fff;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            display: inline-block;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        #errSpan &#123;</span><br><span class="line">            color: red;</span><br><span class="line">            position: absolute;</span><br><span class="line">            bottom: 8px;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        #closeDT &#123;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">            float: left;</span><br><span class="line">            color: #000;</span><br><span class="line">            margin: 72px 10px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;content&quot; id=&quot;content&quot;&gt;</span><br><span class="line">        &lt;a class=&quot;addMessage&quot; id=&quot;addMessage&quot;&gt;添加留言&lt;/a&gt;</span><br><span class="line">        &lt;div class=&quot;submit_con&quot; id=&quot;submit_con&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;con_s&quot;&gt;</span><br><span class="line">                &lt;textarea name=&quot;&quot; cols=&quot;30&quot; rows=&quot;10&quot; id=&quot;text_con&quot; placeholder=&quot;留言&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">                &lt;input type=&quot;text&quot; placeholder=&quot;姓名&quot; id=&quot;name_con&quot;&gt;</span><br><span class="line">                &lt;input type=&quot;button&quot; value=&quot;提交&quot; id=&quot;submit&quot;&gt;</span><br><span class="line">                &lt;a href=&quot;#&quot; id=&quot;closeDT&quot;&gt;关闭&lt;/a&gt;</span><br><span class="line">                &lt;span id=&quot;errSpan&quot;&gt;&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 一个祝福墙模版 --&gt;</span><br><span class="line">        &lt;!-- &lt;div class=&quot;tip&quot; id=&quot;tip&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;tip-h clearfix&quot; title=&quot;双击关闭纸条&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;text&quot;&gt;第[49568]条 2019-04-16 22:51:52&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;close&quot; title=&quot;关闭纸条&quot;&gt;x&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;tip-m&quot;&gt;这是一个寂寞的天，下着有些猥琐的雨&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;tip-f clearfix&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;icon&quot;&gt;</span><br><span class="line">                    &lt;img src=&quot;images/bpic_1.gif&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;name&quot;&gt;群姐&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;幸福墙案例.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p><code>行为 =&gt; JavaScript代码</code><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br></pre></td><td class="code"><pre><span class="line">// 根据id获取元素</span><br><span class="line">function $(id) &#123;</span><br><span class="line">    return document.getElementById(id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 首次加载数据</span><br><span class="line">var messages = [&#123;</span><br><span class="line">    &quot;id&quot;: 1,</span><br><span class="line">    &quot;name&quot;: &quot;张学友&quot;,</span><br><span class="line">    &quot;content&quot;: &quot;刘德华说的对&quot;,</span><br><span class="line">    &quot;time&quot;: &quot;2017-12-26 00:00:00&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    &quot;id&quot;: 2,</span><br><span class="line">    &quot;name&quot;: &quot;刘德华&quot;,</span><br><span class="line">    &quot;content&quot;: &quot;周林林比林利群帅&quot;,</span><br><span class="line">    &quot;time&quot;: &quot;2017-12-25 12:40:00&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    &quot;id&quot;: 3,</span><br><span class="line">    &quot;name&quot;: &quot;郭富城&quot;,</span><br><span class="line">    &quot;content&quot;: &quot;我认同张学友说的&quot;,</span><br><span class="line">    &quot;time&quot;: &quot;2017-12-25 12:45:00&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    &quot;id&quot;: 4,</span><br><span class="line">    &quot;name&quot;: &quot;林利群&quot;,</span><br><span class="line">    &quot;content&quot;: &quot;把朋友家厕所拉堵了 不敢出去 掏了半小时了都&quot;,</span><br><span class="line">    &quot;time&quot;: &quot;2017-12-24 12:40:00&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    &quot;id&quot;: 5,</span><br><span class="line">    &quot;name&quot;: &quot;周林林&quot;,</span><br><span class="line">    &quot;content&quot;: &quot;师者，所以传道受业解惑也。&quot;,</span><br><span class="line">    &quot;time&quot;: &quot;2016-02-22 12:40:00&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    &quot;id&quot;: 6,</span><br><span class="line">    &quot;name&quot;: &quot;紫霞&quot;,</span><br><span class="line">    &quot;content&quot;: &quot;至尊宝，等我&quot;,</span><br><span class="line">    &quot;time&quot;: &quot;2017-12-23 09:30:00&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    &quot;id&quot;: 7,</span><br><span class="line">    &quot;name&quot;: &quot;孙悟空&quot;,</span><br><span class="line">    &quot;content&quot;: &quot;吃俺老孙一棒！&quot;,</span><br><span class="line">    &quot;time&quot;: &quot;2017-12-23 09:30:00&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    &quot;id&quot;: 8,</span><br><span class="line">    &quot;name&quot;: &quot;某某&quot;,</span><br><span class="line">    &quot;content&quot;: &quot;旋转，跳跃，我不停歇…………舞娘的喜悲没人看见&quot;,</span><br><span class="line">    &quot;time&quot;: &quot;2017-12-26 01:30:00&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    &quot;id&quot;: 9,</span><br><span class="line">    &quot;name&quot;: &quot;哎呦哎呦&quot;,</span><br><span class="line">    &quot;content&quot;: &quot;今天谁的礼物最好看！！？答：朋友圈。。。&quot;,</span><br><span class="line">    &quot;time&quot;: &quot;2017-12-25 20:30:00&quot;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">// id处理 =&gt; 无数据库 从100开始</span><br><span class="line">let id = getLocalStorage(&quot;id&quot;)</span><br><span class="line">    // id是否已存在本地 默认100开始</span><br><span class="line">id = id ? id : 100</span><br><span class="line">    // 存储id</span><br><span class="line">setLocalStorage(&quot;id&quot;, id)</span><br><span class="line"></span><br><span class="line">// 获取留言数据</span><br><span class="line">let data = getLocalStorage(&quot;data&quot;)</span><br><span class="line">    //  是否存在数据 =&gt; 不能删除到一条都不剩</span><br><span class="line">data = data ? data : messages</span><br><span class="line">    // 存储原有数据</span><br><span class="line">setLocalStorage(&quot;data&quot;, data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 将数据本地存储</span><br><span class="line">function setLocalStorage(key, value) &#123;</span><br><span class="line">    localStorage.setItem(key, JSON.stringify(value))</span><br><span class="line">&#125;</span><br><span class="line">// 获取数据</span><br><span class="line">function getLocalStorage(key) &#123;</span><br><span class="line">    return JSON.parse(localStorage.getItem(key))</span><br><span class="line">&#125;</span><br><span class="line">// 删除数据</span><br><span class="line">function removeLocalStorage(key) &#123;</span><br><span class="line">    localStorage.removeItem(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 找到 content 元素</span><br><span class="line">var content = document.getElementById(&apos;content&apos;);</span><br><span class="line"></span><br><span class="line">// 层级</span><br><span class="line">let zIndex = 1;</span><br><span class="line"></span><br><span class="line">// 为祝福墙贴纸做对应的事件与绑定</span><br><span class="line">function setMessageCreateNew(data) &#123;</span><br><span class="line">    let tip = document.createElement(&quot;div&quot;)</span><br><span class="line"></span><br><span class="line">    let obj = data</span><br><span class="line"></span><br><span class="line">    tip.className = &quot;tip&quot;</span><br><span class="line">    tip.innerHTML = &apos;&lt;div class=&quot;tip-h clearfix&quot; title=&quot;双击关闭纸条&quot;&gt;&apos; +</span><br><span class="line">        &apos;&lt;div class=&quot;text&quot;&gt;第[&apos; + obj.id + &apos;]条 &apos; + obj.time + &apos;&lt;/div&gt;&apos; +</span><br><span class="line">        &apos;&lt;div class=&quot;close&quot; title=&quot;关闭纸条&quot;&gt;x&lt;/div&gt;&apos; +</span><br><span class="line">        &apos;&lt;/div&gt;&apos; +</span><br><span class="line">        &apos;&lt;div class=&quot;tip-m&quot;&gt;&apos; + obj.content + &apos;&lt;/div&gt;&apos; +</span><br><span class="line">        &apos;&lt;div class=&quot;tip-f clearfix&quot;&gt;&apos; +</span><br><span class="line">        &apos;&lt;div class=&quot;icon&quot;&gt;&apos; +</span><br><span class="line">        &apos;&lt;img src=&quot;images/bpic_1.gif&quot; alt=&quot;&quot; /&gt;&apos; +</span><br><span class="line">        &apos;&lt;/div&gt;&apos; +</span><br><span class="line">        &apos;&lt;div class=&quot;name&quot;&gt;&apos; + obj.name + &apos;&lt;/div&gt;&apos; +</span><br><span class="line">        &apos;&lt;/div&gt;&apos;;</span><br><span class="line"></span><br><span class="line">    // 将元素追加到对应的父盒子中</span><br><span class="line">    content.appendChild(tip)</span><br><span class="line">        // 随机设置位置</span><br><span class="line">    setElXY(tip)</span><br><span class="line">        // 删除留言板</span><br><span class="line">    tip.getElementsByClassName(&quot;close&quot;)[0].onclick = function() &#123;</span><br><span class="line">            // </span><br><span class="line">            removeTip(obj)</span><br><span class="line">                // 找到当前留言 并通过父盒子删除该元素</span><br><span class="line">            this.parentNode.parentNode.parentNode.removeChild(this.parentNode.parentNode)</span><br><span class="line">        &#125;</span><br><span class="line">        // 双击删除</span><br><span class="line">    tip.getElementsByClassName(&quot;tip-h&quot;)[0].ondblclick = function() &#123;</span><br><span class="line">            removeTip(obj)</span><br><span class="line">            this.parentNode.parentNode.removeChild(this.parentNode)</span><br><span class="line">        &#125;</span><br><span class="line">        // z-index</span><br><span class="line">    tip.onclick = function() &#123;</span><br><span class="line">        this.style.zIndex = ++zIndex</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 删除留言板</span><br><span class="line">function removeTip(obj) &#123;</span><br><span class="line">    // 获取所有数据</span><br><span class="line">    let datas = getLocalStorage(&quot;data&quot;)</span><br><span class="line">        // 循环遍历</span><br><span class="line">    for (let i = 0; i &lt; datas.length; i++) &#123;</span><br><span class="line">        // 通过id 找 对应的数据对象</span><br><span class="line">        if (datas[i][&quot;id&quot;] == obj.id) &#123;</span><br><span class="line">            // 删除该数据</span><br><span class="line">            datas.splice(i, 1)</span><br><span class="line">                // 直接跳出循环</span><br><span class="line">            break</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 将处理好的新数据 重新设置回本地存储里</span><br><span class="line">    setLocalStorage(&quot;data&quot;, datas)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 渲染至页面</span><br><span class="line">for (let i = 0; i &lt; data.length; i++) &#123;</span><br><span class="line">    setMessageCreateNew(data[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 设置元素topleft</span><br><span class="line">function setElXY(el) &#123;</span><br><span class="line">    el.style.left = randomXY(content.offsetWidth, 227)</span><br><span class="line">    el.style.top = randomXY(content.offsetHeight, 190)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 随机数 x y</span><br><span class="line">function randomXY(max, min) &#123;</span><br><span class="line">    max = parseInt(max)</span><br><span class="line">    min = parseInt(min)</span><br><span class="line">    return parseInt(Math.random() * (max - min + 1)) + &quot;px&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let flagDTClose = true</span><br><span class="line">    // 动态添加数据层</span><br><span class="line">$(&quot;addMessage&quot;).onclick = function() &#123;</span><br><span class="line">    this.style.display = flagDTClose ? &quot;none&quot; : &quot;block&quot;</span><br><span class="line">    $(&quot;submit_con&quot;).style.display = flagDTClose ? &quot;block&quot; : &quot;none&quot;</span><br><span class="line">    flagDTClose = false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 关闭添加</span><br><span class="line">function closeDT() &#123;</span><br><span class="line">    $(&quot;addMessage&quot;).style.display = flagDTClose ? &quot;none&quot; : &quot;block&quot;</span><br><span class="line">    $(&quot;submit_con&quot;).style.display = flagDTClose ? &quot;block&quot; : &quot;none&quot;</span><br><span class="line">    flagDTClose = true</span><br><span class="line">&#125;</span><br><span class="line">// 关闭</span><br><span class="line">$(&quot;closeDT&quot;).onclick = function() &#123;</span><br><span class="line">    closeDT()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 添加数据</span><br><span class="line">$(&quot;submit&quot;).onclick = function() &#123;</span><br><span class="line">    setMessage()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 数据处理</span><br><span class="line">function setMessage() &#123;</span><br><span class="line">    // 获取用户输入</span><br><span class="line">    let text_con = $(&quot;text_con&quot;).value</span><br><span class="line">    let name_con = $(&quot;name_con&quot;).value</span><br><span class="line">    let date = getDate(new Date())</span><br><span class="line">        // 判读是否输入</span><br><span class="line">    if (text_con.length == 0 || name_con.length == 0) &#123;</span><br><span class="line">        $(&quot;errSpan&quot;).innerHTML = &quot;请填写留言信息和留言人&quot;</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line">    // 获取全部数据</span><br><span class="line">    let data = getLocalStorage(&quot;data&quot;)</span><br><span class="line">        // 用户输入的单条数据</span><br><span class="line">    let idOne = getLocalStorage(&quot;id&quot;) + 1</span><br><span class="line">        // id重新+1 </span><br><span class="line">    setLocalStorage(&quot;id&quot;, idOne)</span><br><span class="line">        // 单条数据对象</span><br><span class="line">    let oneData = &#123;</span><br><span class="line">            &quot;id&quot;: idOne,</span><br><span class="line">            &quot;name&quot;: name_con,</span><br><span class="line">            &quot;content&quot;: text_con,</span><br><span class="line">            &quot;time&quot;: date</span><br><span class="line">        &#125;</span><br><span class="line">        // 将数据添加到原数据的最后面</span><br><span class="line">    data.push(oneData)</span><br><span class="line"></span><br><span class="line">    // 保存本地</span><br><span class="line">    setLocalStorage(&quot;data&quot;, data)</span><br><span class="line"></span><br><span class="line">    // 将新数据追加到页面</span><br><span class="line">    setMessageCreateNew(oneData)</span><br><span class="line"></span><br><span class="line">    // 添加完毕 关闭</span><br><span class="line">    closeDT()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取时间 </span><br><span class="line">// 2017-12-25 20:30:00</span><br><span class="line">function getDate(newDate) &#123;</span><br><span class="line">    let date = newDate</span><br><span class="line">    return `$&#123;date.getFullYear()&#125;-$&#123;setDateOne(date.getMonth()+1)&#125;-$&#123;setDateOne(date.getDate())&#125; $&#123;setDateOne(date.getHours())&#125;:$&#123;setDateOne(date.getMinutes())&#125;:$&#123;setDateOne(date.getSeconds())&#125;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 时间日期一位数 转 二位数</span><br><span class="line">function setDateOne(data) &#123;</span><br><span class="line">    return data &gt;= 10 ? data : `0$&#123;data&#125;`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/12946880-029fad5e0f7d3e9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>slider详细步骤注释</title>
    <link href="http://yoursite.com/2019/05/24/slider/"/>
    <id>http://yoursite.com/2019/05/24/slider/</id>
    <published>2019-05-24T02:57:09.004Z</published>
    <updated>2019-05-24T02:59:15.017Z</updated>
    
    <content type="html"><![CDATA[<h5 id="在JavaScript代码里几乎每行都写了注释-方便新学者入门～-也方便我回顾🙂️"><a href="#在JavaScript代码里几乎每行都写了注释-方便新学者入门～-也方便我回顾🙂️" class="headerlink" title="在JavaScript代码里几乎每行都写了注释 方便新学者入门～ 也方便我回顾🙂️"></a>在JavaScript代码里几乎每行都写了注释 方便新学者入门～ 也方便我回顾🙂️</h5><p><code>github demo -&gt;</code> <a href="https://github.com/LanHai1/slider" target="_blank" rel="noopener">https://github.com/LanHai1/slider</a><br><img src="https://upload-images.jianshu.io/upload_images/12946880-4c5cc103e4a32411.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><hr><h4 id="动画移动元素"><a href="#动画移动元素" class="headerlink" title="动画移动元素"></a>动画移动元素</h4><p>思路:</p><ul><li>执行动画之前先清除动画定时器id=&gt;(避免用户多次点击动画速度变快)<br>将定时器id给每个移动元素 =&gt; el.timeId =&gt; 如果直接给有可能会造成停止一个元素动画影响其他元素</li><li>先获取移动动画的当前位置</li><li>判断每次是正走10 还是反走10 =&gt; 10||-10</li><li>判断元素在运动的当前位置是否还能继续走10 不能走就直接闪现到目标位置<br>绝对值(目标位置-当前位置)&gt;10 绝对值是因为有可能是正走或者反走 但是每次走的距离是一样的</li><li>设置元素的位置</li><li>判断是否已经到达目标值 清理移动定时器<h5 id="xmind-动画移动元素"><a href="#xmind-动画移动元素" class="headerlink" title="xmind 动画移动元素"></a>xmind 动画移动元素</h5><img src="https://upload-images.jianshu.io/upload_images/12946880-a1706ae07be8a2bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></li></ul><hr><h4 id="无缝轮播图"><a href="#无缝轮播图" class="headerlink" title="无缝轮播图"></a>无缝轮播图</h4><p>思路</p><ul><li>鼠标移入轮播区域盒子 显示隐藏 箭头</li><li>声明一个与图片同步的 索引 index =声明一个与页码同步的 索引 pageIndex = 0</li><li>克隆轮播第一张图在最后 =&gt; 无缝轮播</li><li>右点击箭头注册点击事件<br>判断是否是当前轮播是否是最后一张图(克隆过来的第一张图)<br>对应索引值index 和 整个ul(轮播图片)的children的长度 - 1 判断<br>直接闪现到第一张图<br>index = 0<br>再次调用动画函数<br>每次点击 index++<br>每次点击 pageIndex++<br>判断当前页码是否到了最后一个<br>pageIndex == 整个ul(轮播图片)的children的长度 - 1<br>pageIndex = 0<br>直接闪现到第一个页码<br>调用设置对应页码功能函数<br>传入页码li 和 pageIndex<br>调用设置对应页码功能函数<br>传入页码li 和 pageIndex<br>调用动画移动元素<br>传入移动的元素<br>传入移动的目标位置<br>-index*轮播外盒子=&gt;轮播一张图片的宽度<br>取负值 左箭头和右箭头 都是往右移动<br>注意 这个🉐️需要在每次点击index++ 之前做判断</li><li>左箭头注册点击事件<br>判断当前轮播是否是第一张图片 并且继续往左点击<br>对应索引值index==0<br>直接闪现到对应的最后一张图<br>index = 整个ul的children的长度 - 1<br>再次调用动画函数<br>和右箭头一样 不同的是每次点击 index– 和 pageIndex–<br>判断当前页码是否是一个 并且继续往左点击<br>pageIndex == -1<br>pageIndex =  整个ul(轮播图片)的children的长度 - 2<br>调用设置对应页码功能函数<br>传入页码li 和 pageIndex<br>注意 这个🉐️需要在每次点击index– 之前做判断</li><li>设置对应页码功能<br>循环变量每个页码li<br>给每个li设置一个自定义属性 存放对应的索引值<br>为每个li设置点击事件<br>index = 当前li的自定义属性=&gt;存放的索引值<br>调用动画函数<br>调用设置页码排他样式的函数</li><li>设置对应页码排他样式<br>循环遍历 进行排他 清除所有li的点击高亮的样式<br>为当前点击的li设置高量的样式</li><li>设置定时器定时轮播<br>声明一个变量定时器<br>页码加载开始 直接开启一个定时器<br>setInterval(封装右箭头点击函数,3000)<br>鼠标移入轮播区域关闭轮播定时器<br>鼠标移出开启一个 轮播定时器<h5 id="xmind-无缝轮播图"><a href="#xmind-无缝轮播图" class="headerlink" title="xmind 无缝轮播图"></a>xmind 无缝轮播图</h5><img src="https://upload-images.jianshu.io/upload_images/12946880-d1cb3b3299ad2d1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></li></ul><h4 id="无缝轮播图-图解"><a href="#无缝轮播图-图解" class="headerlink" title="无缝轮播图 图解"></a>无缝轮播图 图解</h4><p><img src="https://upload-images.jianshu.io/upload_images/12946880-d4756cef96b030ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><code>样式结构</code><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            list-style: none;</span><br><span class="line">            border: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .all &#123;</span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            padding: 7px;</span><br><span class="line">            border: 1px solid #ccc;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .screen &#123;</span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .screen li &#123;</span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .screen ul &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 0;</span><br><span class="line">            top: 0;</span><br><span class="line">            /*要足够宽才放到一行里*/</span><br><span class="line">            width: 3000px;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .all ol &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            right: 10px;</span><br><span class="line">            bottom: 10px;</span><br><span class="line">            line-height: 20px;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .all ol li &#123;</span><br><span class="line">            float: left;</span><br><span class="line">            width: 20px;</span><br><span class="line">            height: 20px;</span><br><span class="line">            background: #fff;</span><br><span class="line">            border: 1px solid #ccc;</span><br><span class="line">            margin-left: 10px;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line">        /*点到哪个页码就让哪个页码加一个current类就变黄了*/</span><br><span class="line">        </span><br><span class="line">        .all ol li.current &#123;</span><br><span class="line">            background: yellow;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        #arr &#123;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        #arr span &#123;</span><br><span class="line">            width: 40px;</span><br><span class="line">            height: 40px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 5px;</span><br><span class="line">            top: 50%;</span><br><span class="line">            margin-top: -20px;</span><br><span class="line">            background: #000;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            line-height: 40px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            font-weight: bold;</span><br><span class="line">            font-family: &apos;黑体&apos;;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            color: #fff;</span><br><span class="line">            /*透明度：这个是指全透明*/</span><br><span class="line">            opacity: 0.3;</span><br><span class="line">            border: 1px solid #fff;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        #arr #right &#123;</span><br><span class="line">            /*距离父元素右边5像素*/</span><br><span class="line">            right: 5px;</span><br><span class="line">            /*代表把left的值清空（设置为默认值）*/</span><br><span class="line">            left: auto;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;all&quot; id=&apos;box&apos;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 显示图片的区域 --&gt;</span><br><span class="line">        &lt;div class=&quot;screen&quot;&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;&lt;img src=&quot;images/1.jpg&quot; width=&quot;500&quot; height=&quot;200&quot; /&gt;&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;&lt;img src=&quot;images/2.jpg&quot; width=&quot;500&quot; height=&quot;200&quot; /&gt;&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;&lt;img src=&quot;images/3.jpg&quot; width=&quot;500&quot; height=&quot;200&quot; /&gt;&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;&lt;img src=&quot;images/4.jpg&quot; width=&quot;500&quot; height=&quot;200&quot; /&gt;&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;&lt;img src=&quot;images/5.jpg&quot; width=&quot;500&quot; height=&quot;200&quot; /&gt;&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">            &lt;!-- 页码 --&gt;</span><br><span class="line">            &lt;ol&gt;</span><br><span class="line">                &lt;li class=&quot;current&quot;&gt;1&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;2&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;3&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;4&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;5&lt;/li&gt;</span><br><span class="line">            &lt;/ol&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 左右箭头那一部分 --&gt;</span><br><span class="line">        &lt;div id=&quot;arr&quot;&gt;&lt;span id=&quot;left&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span id=&quot;right&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p><code>行为 JavaScript代码</code><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line">// 通过id获取元素</span><br><span class="line">function $(id) &#123;</span><br><span class="line">    return document.getElementById(id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 最外层盒子</span><br><span class="line">let box = $(&quot;box&quot;)</span><br><span class="line"></span><br><span class="line">// 箭头盒子</span><br><span class="line">let arr_box = $(&quot;arr&quot;)</span><br><span class="line"></span><br><span class="line">// 左箭头</span><br><span class="line">let left_arr = $(&quot;left&quot;)</span><br><span class="line"></span><br><span class="line">// 右箭头</span><br><span class="line">let right_arr = $(&quot;right&quot;)</span><br><span class="line"></span><br><span class="line">// 轮播图片区域宽度</span><br><span class="line">let screenWidth = document.querySelector(&quot;.screen&quot;).offsetWidth</span><br><span class="line"></span><br><span class="line">// 轮播ul</span><br><span class="line">let ul_banner = document.querySelector(&quot;.screen &gt; ul&quot;)</span><br><span class="line"></span><br><span class="line">// 页码</span><br><span class="line">let ol_banner_current = document.querySelectorAll(&quot;.screen &gt; ol &gt; li&quot;)</span><br><span class="line"></span><br><span class="line">// 克隆轮播第一张图片 =&gt; 无缝轮播</span><br><span class="line">ul_banner.appendChild(ul_banner.children[0].cloneNode(true))</span><br><span class="line"></span><br><span class="line">//定时器</span><br><span class="line">let timeId</span><br><span class="line">timeId = setInterval(nextPage, 3000)</span><br><span class="line"></span><br><span class="line">// 鼠标移入移除显示隐藏 箭头</span><br><span class="line">box.onmouseover = function() &#123;</span><br><span class="line">    // 清除定时器 用户操作</span><br><span class="line">    clearInterval(timeId)</span><br><span class="line">    arr_box.style.display = &quot;block&quot;</span><br><span class="line">&#125;</span><br><span class="line">box.onmouseout = function() &#123;</span><br><span class="line">    // 继续轮播 开启定时器</span><br><span class="line">    timeId = setInterval(nextPage, 3000)</span><br><span class="line">    arr_box.style.display = &quot;none&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 左右箭头事件 下一张 上一张</span><br><span class="line">// 图片索引值</span><br><span class="line">let index = 0</span><br><span class="line"></span><br><span class="line">// 页码索引</span><br><span class="line">let pageIndex = 0</span><br><span class="line">right_arr.onclick = function() &#123;</span><br><span class="line">    nextPage()</span><br><span class="line">&#125;</span><br><span class="line">left_arr.onclick = function() &#123;</span><br><span class="line">    // 判断是否是第一张 并且继续往左移动</span><br><span class="line">    if (index == 0) &#123;</span><br><span class="line">        // 直接闪现到图片的倒数第二张(克隆前最后一张)</span><br><span class="line">        index = ul_banner.children.length - 1</span><br><span class="line">        ul_banner.style.left = `$&#123;-index*screenWidth&#125;px`</span><br><span class="line">    &#125;</span><br><span class="line">    // 索引每次减一</span><br><span class="line">    index--</span><br><span class="line">    pageIndex--</span><br><span class="line">    // 判断是否页码在第一个 并且继续往左走 =&gt; 直接去最后一个页码</span><br><span class="line">    if (pageIndex == -1) &#123;</span><br><span class="line">        pageIndex = ul_banner.children.length - 2</span><br><span class="line">        setPageClass(ol_banner_current, pageIndex)</span><br><span class="line">    &#125;</span><br><span class="line">    setPageClass(ol_banner_current, pageIndex)</span><br><span class="line">    bannerAnimation(ul_banner, -index * screenWidth)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 页码功能</span><br><span class="line">for (let i = 0; i &lt; ol_banner_current.length; i++) &#123;</span><br><span class="line">    // 设置自定义属性 存放索引</span><br><span class="line">    ol_banner_current[i].setAttribute(&quot;index&quot;, i)</span><br><span class="line">        // 设置点击事件 触发排他设置页码样式</span><br><span class="line">    ol_banner_current[i].onclick = function() &#123;</span><br><span class="line">        // 轮播区域跟着页码点击一起移动</span><br><span class="line">        index = pageIdex =  +this.getAttribute(&quot;index&quot;)</span><br><span class="line">        bannerAnimation(ul_banner, -index * screenWidth)</span><br><span class="line">        setPageClass(ol_banner_current, +this.getAttribute(&quot;index&quot;))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 设置页码样式</span><br><span class="line"> * @param &#123;*&#125; el 页码</span><br><span class="line"> * @param &#123;*&#125; thisIndex 高亮的元素索引</span><br><span class="line"> */</span><br><span class="line">function setPageClass(el, thisIndex) &#123;</span><br><span class="line">    // 循环排它</span><br><span class="line">    for (let i = 0; i &lt; el.length; i++) &#123;</span><br><span class="line">        el[i].removeAttribute(&quot;class&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    // 设置高亮</span><br><span class="line">    el[thisIndex].className = &quot;current&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 移动动画</span><br><span class="line"> * @param &#123;element&#125; el 移动的元素</span><br><span class="line"> * @param &#123;number&#125; target 目标位置</span><br><span class="line"> */</span><br><span class="line">function bannerAnimation(el, target) &#123;</span><br><span class="line">    // 设定定时器前先清理定时器</span><br><span class="line">    clearInterval(el.timeId)</span><br><span class="line"></span><br><span class="line">    // 将定时器id给元素里面的属性 定时器id唯一化 不会影响其他移动元素</span><br><span class="line">    el.timeId = setInterval(() =&gt; &#123;</span><br><span class="line">        // 元素当前位置</span><br><span class="line">        let count = el.offsetLeft</span><br><span class="line"></span><br><span class="line">        // 每次走10 判断左走还是右走</span><br><span class="line">        count += target &gt; count ? 10 : -10</span><br><span class="line"></span><br><span class="line">        // 判断是否还能继续走10 不能直接跳到目标位置 取绝对值 可能是负数</span><br><span class="line">        count = Math.abs(target - count) &gt; 10 ? count : target</span><br><span class="line"></span><br><span class="line">        // 设置元素位置</span><br><span class="line">        el.style.left = `$&#123;count&#125;px`</span><br><span class="line"></span><br><span class="line">        // 达到目标位置 结束定时器 =&gt; 结束动画</span><br><span class="line">        if (target == count) &#123;</span><br><span class="line">            clearInterval(el.timeId)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, 20)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 下一张 =&gt; 定时轮播</span><br><span class="line"> */</span><br><span class="line">function nextPage() &#123;</span><br><span class="line">    // 判断是否是最后一张 =&gt; 闪现到第一张 =&gt; 无缝轮播</span><br><span class="line">    if (index == ul_banner.children.length - 1) &#123; // 5 = 5</span><br><span class="line">        // 直接闪现到第一张图片即可</span><br><span class="line">        index = 0</span><br><span class="line">        ul_banner.style.left = `$&#123;-index*screenWidth&#125;px`</span><br><span class="line">    &#125;</span><br><span class="line">    // 索引每次加一</span><br><span class="line">    index++</span><br><span class="line">    // 页码索引加一</span><br><span class="line">    pageIndex++</span><br><span class="line">    // 判断是否页码到了最后一个 =&gt; 直接去第一个页码</span><br><span class="line">    if (pageIndex == ul_banner.children.length - 1) &#123;</span><br><span class="line">        pageIndex = 0</span><br><span class="line">        setPageClass(ol_banner_current, pageIndex)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 页码样式</span><br><span class="line">    setPageClass(ol_banner_current, pageIndex)</span><br><span class="line"></span><br><span class="line">    // 调用动画函数</span><br><span class="line">    bannerAnimation(ul_banner, -index * screenWidth)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;在JavaScript代码里几乎每行都写了注释-方便新学者入门～-也方便我回顾🙂️&quot;&gt;&lt;a href=&quot;#在JavaScript代码里几乎每行都写了注释-方便新学者入门～-也方便我回顾🙂️&quot; class=&quot;headerlink&quot; title=&quot;在JavaScr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>百度搜索</title>
    <link href="http://yoursite.com/2019/05/24/baiduSearch/"/>
    <id>http://yoursite.com/2019/05/24/baiduSearch/</id>
    <published>2019-05-24T02:54:25.124Z</published>
    <updated>2019-05-24T02:56:24.660Z</updated>
    
    <content type="html"><![CDATA[<p>案例使用了 本地存储历史记录 搜索联想(纯前端模拟数据 未使用数据库 后续demo会使用～) </p><h6 id="JavaScript代码几乎每行都有注释-方便阅读理解思路"><a href="#JavaScript代码几乎每行都有注释-方便阅读理解思路" class="headerlink" title="JavaScript代码几乎每行都有注释 方便阅读理解思路"></a>JavaScript代码几乎每行都有注释 方便阅读理解思路</h6><p><code>github demo 网址 =&gt;</code> <a href="https://github.com/LanHai1/search-baidu" target="_blank" rel="noopener">https://github.com/LanHai1/search-baidu</a><br><img src="https://upload-images.jianshu.io/upload_images/12946880-5c8b72477e75d787.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li>输入搜索框 注册弹起键盘事件<br>判断是否文本框为空<br>清空之前联想的数据<br>return出去<br>可替换成调用历史提示记录</li><li>先清空之前联想的数据</li><li>循环遍历联想数据数组<br>判断是否存在联想数据<br>indexOf() &gt; -1<br>将数据通过创建元素追加到页面中去<br>鼠标移入高亮<br>移出恢复原来的背景颜色</li><li>search按钮注册点击事件 保存历史记录至本地<br>先获取本地数据<br>默认值 “”<br>判断用户是否未输入<br>判断用户输入的数据是否已经存在<br>return<br>三元表达式判断是否有数据<br>逗号拼接数据<br>将新数据存放回本地储存</li><li>历史记录提示<br>给文本框注册获取光标事件<br>先清空之前的历史记录提示<br>获取本地数据<br>默认值 “”<br>字符串方法 split(“,”) 逗号切割字符串<br>用变量接收 返回数组<br>循环遍历数组<br>将数据通过创建元素追加到页面中去<br>鼠标移入高亮<br>移出恢复原来的背景颜色<br>注册鼠标点击事件<br>将当前li的值给文本框<br>给文本框注册失去光标事件<br>设置延时器<br>因为失去光标事件优先执行在点击事件前面<br>清空历史记录</li></ul><h4 id="xmind图释"><a href="#xmind图释" class="headerlink" title="xmind图释"></a>xmind图释</h4><p><img src="https://upload-images.jianshu.io/upload_images/12946880-5c975b5fbbc91b97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><code>结构 样式</code><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        input &#123;</span><br><span class="line">            outline: none;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">            height: 40px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            z-index: 9;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .clearfix &#123;</span><br><span class="line">            *z-index: 1;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .clearfix::after &#123;</span><br><span class="line">            content: &quot;&quot;;</span><br><span class="line">            display: block;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            clear: both;</span><br><span class="line">            visibility: hidden;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .cont &#123;</span><br><span class="line">            width: 641px;</span><br><span class="line">            margin: 300px auto;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .fl &#123;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .fr &#123;</span><br><span class="line">            float: right;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        #txt &#123;</span><br><span class="line">            width: 537px;</span><br><span class="line">            padding: 10px 80px 10px 7px;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        #search &#123;</span><br><span class="line">            width: 104px;</span><br><span class="line">            -webkit-appearance: button;</span><br><span class="line">            -moz-appearance: button;</span><br><span class="line">            line-height: 40px;</span><br><span class="line">            font-size: 16px;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            color: #000;</span><br><span class="line">            border-left: 0;</span><br><span class="line">            background-image: linear-gradient(135deg, #fff8f8, #d3d3d3);</span><br><span class="line">            right: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .ul_search &#123;</span><br><span class="line">            list-style: none;</span><br><span class="line">            width: 639px;</span><br><span class="line">            display: none;</span><br><span class="line">            border: 1px solid #b6b6b6;</span><br><span class="line">            border-top: 0;</span><br><span class="line">            margin-top: -1px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 40px;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .ul_search&gt;li &#123;</span><br><span class="line">            padding: 0 10px;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            text-overflow: ellipsis;</span><br><span class="line">            white-space: nowrap;</span><br><span class="line">            height: 20px;</span><br><span class="line">            line-height: 20px;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">            cursor: default;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;cont clearfix&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; id=&quot;txt&quot; class=&quot;fl&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;百度一下&quot; id=&quot;search&quot; class=&quot;fl&quot;&gt;</span><br><span class="line">        &lt;ul class=&quot;ul_search fl&quot; id=&quot;ul_box&quot;&gt;&lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p><code>JavaScript代码</code><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取id</span><br><span class="line"> * @param &#123;string&#125; id </span><br><span class="line"> */</span><br><span class="line">function $(id) &#123;</span><br><span class="line">    return document.getElementById(id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 联想数据</span><br><span class="line">var keywords = [&quot;林利群&quot;, &quot;林利群为什么很黑&quot;, &quot;林利群的经纪人是周林林吗&quot;, &quot;林利群是谁&quot;, &quot;广东人&quot;, &quot;广东人爱吃&quot;, &quot;广东人爱吃福建人&quot;, &quot;林丹的生平&quot;, &quot;JavaScript&quot;,</span><br><span class="line">    &quot;Java&quot;, &quot;王思聪&quot;, &quot;王健林&quot;, &quot;社会王&quot;, &quot;隔壁老王&quot;, &quot;林绿群&quot;, &quot;你打球像蔡徐坤&quot;, &apos;aaa&apos;, &apos;bbb&apos;, &apos;王祖蓝&apos;, &apos;你打球王祖蓝&apos;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">// 键盘弹起事件</span><br><span class="line">$(&quot;txt&quot;).onkeyup = function() &#123;</span><br><span class="line">    // 每次弹起之前先清空之前的联想</span><br><span class="line">    $(&quot;ul_box&quot;).innerHTML = &quot;&quot;</span><br><span class="line"></span><br><span class="line">    // 为空直接跳出函数</span><br><span class="line">    if (this.value.length == 0) &#123;</span><br><span class="line">        // 隐藏ul</span><br><span class="line">        $(&quot;ul_box&quot;).style.display = &quot;none&quot;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 循环遍历 判断是否存在联想</span><br><span class="line">    for (let i = 0; i &lt; keywords.length; i++) &#123;</span><br><span class="line">        // indexOf =&gt; 为空&quot;&quot; 返回0 待处理</span><br><span class="line">        if (keywords[i].indexOf(this.value) != -1) &#123;</span><br><span class="line">            // 存在联想 直接渲染页面</span><br><span class="line">            renderUl(keywords[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 渲染ul下的li</span><br><span class="line"> * @param &#123;array_string&#125; arrString </span><br><span class="line"> */</span><br><span class="line">function renderUl(arrString) &#123;</span><br><span class="line">    let li = document.createElement(&quot;li&quot;)</span><br><span class="line">    li.innerHTML = arrString</span><br><span class="line"></span><br><span class="line">    // 将li追加至ul里面</span><br><span class="line">    $(&quot;ul_box&quot;).appendChild(li)</span><br><span class="line"></span><br><span class="line">    // 显示ul</span><br><span class="line">    $(&quot;ul_box&quot;).style.display = &quot;block&quot;</span><br><span class="line">        // 高亮</span><br><span class="line">    ul_li_syle(li)</span><br><span class="line"></span><br><span class="line">    // 点击 li的值 赋值给 txt</span><br><span class="line">    // 失去光标优先级大于点击 会先执行 </span><br><span class="line">    // 失去光标的时候清空了ul里面的内容 所以这个时候就获取不到数据了</span><br><span class="line">    // 解决方案 给失去光标延时器</span><br><span class="line">    li.onclick = function() &#123;</span><br><span class="line">        $(&quot;txt&quot;).value = this.innerHTML</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 高亮</span><br><span class="line"> * @param &#123;element&#125; el </span><br><span class="line"> */</span><br><span class="line">function ul_li_syle(el) &#123;</span><br><span class="line">    // 高亮</span><br><span class="line">    el.onmouseover = function() &#123;</span><br><span class="line">        this.style.backgroundColor = &quot;#cccccc96&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    el.onmouseout = function() &#123;</span><br><span class="line">        this.style.backgroundColor = &quot;#fff&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 本地存储 -&gt; 历史记录</span><br><span class="line"></span><br><span class="line">// 搜索后保存历史记录至本地</span><br><span class="line">$(&quot;search&quot;).onclick = function() &#123;</span><br><span class="line">    // 为空不保存</span><br><span class="line">    if ($(&quot;txt&quot;).value.length == 0) &#123;</span><br><span class="line">        $(&quot;ul_box&quot;).style.dispaly = &quot;none&quot;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    // 获取数据 =&gt; 进行拼接</span><br><span class="line">    let old_data = localStorage.getItem(&quot;search_baidu&quot;) || &quot;&quot;</span><br><span class="line"></span><br><span class="line">    // 判断数据是否已经存在本地</span><br><span class="line">    if (old_data.indexOf($(&quot;txt&quot;).value) &gt; -1) &#123;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 数据逗号拼接</span><br><span class="line">    // 判断是否右数据 拼接处理</span><br><span class="line">    let new_data = old_data ? `$&#123;old_data&#125;,$&#123;$(&quot;txt&quot;).value&#125;` : $(&quot;txt&quot;).value</span><br><span class="line"></span><br><span class="line">    // 保存数据</span><br><span class="line">    localStorage.setItem(&quot;search_baidu&quot;, new_data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取光标 历史记录提示</span><br><span class="line">$(&quot;txt&quot;).onfocus = function() &#123;</span><br><span class="line">    // 获取数据</span><br><span class="line">    let data = localStorage.getItem(&quot;search_baidu&quot;)</span><br><span class="line"></span><br><span class="line">    // 判断是否已经有历史记录</span><br><span class="line">    if (data == null) &#123;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    // 逗号处理</span><br><span class="line">    let arr_data = data.split(&quot;,&quot;).reverse()</span><br><span class="line">    for (let i = 0; i &lt; arr_data.length; i++) &#123;</span><br><span class="line">        renderUl(arr_data[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 失去光标 历史记录移除</span><br><span class="line">$(&quot;txt&quot;).onblur = function() &#123;</span><br><span class="line">    // 延迟执行 失去光标的优先级大于点击事件</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        $(&quot;ul_box&quot;).innerHTML = &quot;&quot;</span><br><span class="line">        $(&quot;ul_box&quot;).style.display = &quot;none&quot;</span><br><span class="line">    &#125;, 200)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;案例使用了 本地存储历史记录 搜索联想(纯前端模拟数据 未使用数据库 后续demo会使用～) &lt;/p&gt;
&lt;h6 id=&quot;JavaScript代码几乎每行都有注释-方便阅读理解思路&quot;&gt;&lt;a href=&quot;#JavaScript代码几乎每行都有注释-方便阅读理解思路&quot; class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>magnifying-glass 放大镜</title>
    <link href="http://yoursite.com/2019/05/24/magnifying-glass.1/"/>
    <id>http://yoursite.com/2019/05/24/magnifying-glass.1/</id>
    <published>2019-05-24T02:48:34.072Z</published>
    <updated>2019-05-24T02:48:34.072Z</updated>
    
    <content type="html"><![CDATA[<p>本篇讲解仿京东 鼠标移入商品 放大显示</p><p>🤪<br><img src="https://upload-images.jianshu.io/upload_images/12946880-d9fb00e800fbcc04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图"><br><code>git demo =&gt;</code><a href="https://github.com/LanHai1/magnifying-glass" target="_blank" rel="noopener">https://github.com/LanHai1/magnifying-glass</a></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li>1- 鼠标移入移出小图盒子 显示和隐藏 mask阴影层 和 大图盒子</li><li>2- 为小图盒子添加鼠标移动事件<br>2-1- 为事件对象e做兼容处理<br>2-2- 获取鼠标相对于小盒子里面的x和y<br>2-2-1- offsetX和offsetY 有bug ，自己计算<br>2-2-2- x = e.clientX - 盒子自身到可视区域的left<br>2-2-3- y = e.clientY - 盒子自身到可视区域的top<br>2-2-4- 鼠标在阴影层的中间<br>所以最后计算出来的x和y还要减去 mask阴影层的宽高各一半<br>2-3- 获取阴影盒子的最大和最小移动范围<br>2-3-1- 小盒子宽度 - 阴影盒子的宽度<br>2-3-2- 小盒子高度 - 阴影盒子的高度<br>2-4- 判断最大值和最小值<br>2-4-1- 最小值<br><code>x = x &gt; 0 ? x : 0;</code><br>2-4-2- 最大值<br><code>y = y &lt; maxY ? y : maxY;</code><br>2-5- 将值给mask阴影层的left和top<br>2-6- 实现大图跟着鼠标移动<br>2-6-1- 算出计算比例<br>2-6-1-1- 大图片的宽度 / 小图片的宽度<br>2-6-2- 设置大图的top和left<br>2-6-2-1- 移动的x值乘计算出来的x比例<h4 id="xmind图释"><a href="#xmind图释" class="headerlink" title="xmind图释"></a>xmind图释</h4><img src="https://upload-images.jianshu.io/upload_images/12946880-a7901c9a10a6cd6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><code>样式</code><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box &#123;</span><br><span class="line">    width: 350px;</span><br><span class="line">    height: 350px;</span><br><span class="line">    margin: 100px;</span><br><span class="line">    border: 1px solid #ccc;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.big &#123;</span><br><span class="line">    width: 400px;</span><br><span class="line">    height: 400px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 360px;</span><br><span class="line">    border: 1px solid #ccc;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.mask &#123;</span><br><span class="line">    width: 175px;</span><br><span class="line">    height: 175px;</span><br><span class="line">    background: rgba(255, 255, 0, 0.4);</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    cursor: move;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.small &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box img &#123;</span><br><span class="line">    vertical-align: top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#bigBox&gt;img &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><code>结构</code><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot; id=&quot;box&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;small&quot; id=&quot;smallBox&quot;&gt;</span><br><span class="line">        &lt;img id=&quot;smallImg&quot; src=&quot;images/001.jpg&quot; width=&quot;350&quot; alt=&quot;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=&quot;mask&quot; id=&quot;mask&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;big&quot; id=&quot;bigBox&quot;&gt;</span><br><span class="line">        &lt;img id=&quot;bigImg&quot; src=&quot;images/0001.jpg&quot; width=&quot;800&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p><code>行为</code><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 根据id获取元素</span><br><span class="line"> * @param &#123;*&#125; id </span><br><span class="line"> */</span><br><span class="line">let $ = id =&gt; document.getElementById(id);</span><br><span class="line"></span><br><span class="line">// 鼠标移入移出显示隐藏 mask阴影和大图</span><br><span class="line">$(&quot;smallBox&quot;).onmouseover = function() &#123;</span><br><span class="line">    $(&quot;mask&quot;).style.display = $(&quot;bigBox&quot;).style.display = &quot;block&quot;;</span><br><span class="line">&#125;;</span><br><span class="line">$(&quot;smallBox&quot;).onmouseout = function() &#123;</span><br><span class="line">    $(&quot;mask&quot;).style.display = $(&quot;bigBox&quot;).style.display = &quot;none&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 为小盒子添加鼠标移动事件</span><br><span class="line">$(&quot;smallBox&quot;).onmousemove = function(e) &#123;</span><br><span class="line">    // 事件对象e做兼容</span><br><span class="line">    e = e || window.event;</span><br><span class="line">    // 获取鼠标相对于小盒子里面的x和y</span><br><span class="line">    // offsetX和offsetY有bug 自己计算 </span><br><span class="line">    // x = e.clientX - 盒子自身到可视区域的left</span><br><span class="line">    // y = e.clientY - 盒子自身到可视区域的top </span><br><span class="line">    // 因为想要鼠标在阴影层的中间 所以减去阴影盒子宽高的一半</span><br><span class="line">    let x = e.clientX - $(&quot;smallBox&quot;).getBoundingClientRect()[&quot;left&quot;] - $(&quot;mask&quot;).offsetWidth / 2;</span><br><span class="line">    let y = e.clientY - $(&quot;smallBox&quot;).getBoundingClientRect()[&quot;top&quot;] - $(&quot;mask&quot;).offsetHeight / 2;</span><br><span class="line"></span><br><span class="line">    // 获取阴影盒子最大和最小区域范围</span><br><span class="line">    // 小盒子宽度 - 阴影盒子的宽度</span><br><span class="line">    let maxX = $(&quot;smallBox&quot;).offsetWidth - $(&quot;mask&quot;).offsetWidth;</span><br><span class="line">    let maxY = $(&quot;smallBox&quot;).offsetHeight - $(&quot;mask&quot;).offsetHeight;</span><br><span class="line"></span><br><span class="line">    // 最小值</span><br><span class="line">    x = x &gt; 0 ? x : 0;</span><br><span class="line">    y = y &gt; 0 ? y : 0;</span><br><span class="line"></span><br><span class="line">    // 最大值</span><br><span class="line">    x = x &lt; maxX ? x : maxX;</span><br><span class="line">    y = y &lt; maxY ? y : maxY;</span><br><span class="line"></span><br><span class="line">    setXY($(&quot;mask&quot;), &#123;</span><br><span class="line">        left: x,</span><br><span class="line">        top: y</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 大图跟着移动</span><br><span class="line">    // 计算比例 大图片的宽度 / 小图片的宽度</span><br><span class="line">    let xProportion = $(&quot;bigImg&quot;).offsetWidth / $(&quot;smallImg&quot;).offsetWidth;</span><br><span class="line">    let yProportion = $(&quot;bigImg&quot;).offsetHeight / $(&quot;smallImg&quot;).offsetHeight;</span><br><span class="line"></span><br><span class="line">    // 设置对应值 移动的x值乘计算出来的x比例</span><br><span class="line">    setXY($(&quot;bigImg&quot;), &#123;</span><br><span class="line">        left: -x * xProportion,</span><br><span class="line">        top: -y * yProportion</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line">/**</span><br><span class="line"> * 设置元素的left 和 top</span><br><span class="line"> * @param &#123;element&#125; el </span><br><span class="line"> * @param &#123;json&#125; attrs </span><br><span class="line"> */</span><br><span class="line">function setXY(el, attrs) &#123;</span><br><span class="line">    for (const key in attrs) &#123;</span><br><span class="line">        el.style[key] = `$&#123;attrs[key]&#125;px`;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇讲解仿京东 鼠标移入商品 放大显示&lt;/p&gt;
&lt;p&gt;🤪&lt;br&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/12946880-d9fb00e800fbcc04.png?imageMogr2/auto-o
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mac系统直接运行windows应用程序</title>
    <link href="http://yoursite.com/2019/05/24/mac&amp;window/"/>
    <id>http://yoursite.com/2019/05/24/mac&amp;window/</id>
    <published>2019-05-24T02:29:13.848Z</published>
    <updated>2019-05-24T02:51:04.813Z</updated>
    
    <content type="html"><![CDATA[<h2 id="不切换系统"><a href="#不切换系统" class="headerlink" title="不切换系统"></a>不切换系统</h2><h2 id="不装虚拟机"><a href="#不装虚拟机" class="headerlink" title="不装虚拟机"></a>不装虚拟机</h2><p>##不出钱<br>想在mac里面用Windows应用程序 装虚拟机电脑太热 windows系统太卡 装双系统切换麻烦 装crossover 破解也只有14天 过后还得花钱 mmp<br><img src="https://upload-images.jianshu.io/upload_images/12946880-765d47621ae082f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>终端安装 <code>brew install wine</code><br>安装完成后<br>运行应用程序 =&gt; <code>wine &quot;应用程序安装包地址&quot;</code><br><img src="https://upload-images.jianshu.io/upload_images/12946880-c3f2d250b928fd06.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/12946880-16d47785b691ac6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;不切换系统&quot;&gt;&lt;a href=&quot;#不切换系统&quot; class=&quot;headerlink&quot; title=&quot;不切换系统&quot;&gt;&lt;/a&gt;不切换系统&lt;/h2&gt;&lt;h2 id=&quot;不装虚拟机&quot;&gt;&lt;a href=&quot;#不装虚拟机&quot; class=&quot;headerlink&quot; title=&quot;不装虚
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript ECMAScript语法概括</title>
    <link href="http://yoursite.com/2019/05/24/ECMAScript/"/>
    <id>http://yoursite.com/2019/05/24/ECMAScript/</id>
    <published>2019-05-23T16:25:00.135Z</published>
    <updated>2019-05-24T02:41:55.639Z</updated>
    
    <content type="html"><![CDATA[<p><em>本篇讲解ecma语法</em></p><h2 id="JavaScript是什么-？"><a href="#JavaScript是什么-？" class="headerlink" title="JavaScript是什么 ？"></a>JavaScript是什么 ？</h2><ul><li>JavaScript是一门脚本语言<br>脚本语言:不需要编译，直接运行(js,python…)<br>编译语言:需要把代码翻译成计算机所认识的二进制语言，才能运行(c,c++,java…)<ul><li>JavaScript是一门<strong>基于</strong>对象的语言<br>基于 而不是 面向<br>JavaScript可以模拟其他语言的特性(封装、继承、多态)</li><li>JavaScript是一门动态类型的语言</li><li>JavaScript是一门弱类型的语言</li><li>JavaScript是一门解释性的语言</li></ul></li></ul><hr><h2 id="JavaScript能做什么？"><a href="#JavaScript能做什么？" class="headerlink" title="JavaScript能做什么？"></a>JavaScript能做什么？</h2><ul><li>前端开发</li><li>后端开发</li><li>底层</li><li>操作系统开发</li><li>大数据</li><li>区块链</li><li>人工智能</li><li>… js无所不能</li></ul><hr><h2 id="引入js的两种方式"><a href="#引入js的两种方式" class="headerlink" title="引入js的两种方式"></a>引入js的两种方式</h2><ul><li>内联<br>在html中 body标签内的最下方通过script标签 编写js代码<br> <code>&lt;script&gt;var a = 1;&lt;/script&gt;</code></li><li>外联<br>引入外部文件 在html中 body标签内的最下方通过script标签的src属性引入文件<br><code>&lt;script src=&quot;./index.js&quot;&gt;&lt;/script&gt;</code></li></ul><hr><h2 id="为什么要有变量？"><a href="#为什么要有变量？" class="headerlink" title="为什么要有变量？"></a>为什么要有变量？</h2><blockquote><p>为了存储和复用一个数据，方便修改</p></blockquote><p><code>当声明一个变量的时候 var a = 10 ,会在内存中开辟以一个空间 存放变量名和变量值 ,会将变量和值存放到window对象中 a:10</code></p><hr><h4 id="1-全局变量"><a href="#1-全局变量" class="headerlink" title="1. 全局变量"></a>1. 全局变量</h4><blockquote><p>全局作用域中的变量 可以在该脚本文件中的任何地方访问到</p></blockquote><h4 id="2-局部变量"><a href="#2-局部变量" class="headerlink" title="2. 局部变量"></a>2. 局部变量</h4><blockquote><p>局部作用域中的变量 局部变量只能在该函数中访问到</p></blockquote><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p><code>在局部作用域中(函数中)声明变量 如果未加关键字 var || let || const</code> 这个变量就会变为隐式全局变量<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function a()&#123;</span><br><span class="line">  num = 1;</span><br><span class="line">&#125;</span><br><span class="line">=&gt;</span><br><span class="line">var num;</span><br><span class="line">function a()&#123;</span><br><span class="line">  num = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/*只有num1 是局部变量 ， num2 和 num3 是隐式全局变量*/</span><br><span class="line">function a()&#123;</span><br><span class="line">  var num1 = num2 = num3 = 100;</span><br><span class="line">&#125;</span><br><span class="line">=&gt;</span><br><span class="line">var num2;</span><br><span class="line">var num3;</span><br><span class="line">function a()&#123;</span><br><span class="line">  var num1 = 100;</span><br><span class="line">  num2 = 100;</span><br><span class="line">  num3 = 100;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="JavaScript代码规范以及变量命名"><a href="#JavaScript代码规范以及变量命名" class="headerlink" title="JavaScript代码规范以及变量命名"></a>JavaScript代码规范以及变量命名</h2><blockquote><p>声明关键词 <code>var let const</code><br>变量名区分大小写</p></blockquote><p><code>命名规范</code></p><blockquote><p>一般以字母、$、下划线、数字组成(不能以数字开头)<br>不能使用系统关键词和保留字<br>一般遵循驼峰命名法(第一个单词首字面小写后面单词首字母大写)</p></blockquote><h2 id="变量名需得有意义"><a href="#变量名需得有意义" class="headerlink" title="变量名需得有意义"></a>变量名需得有意义</h2><h2 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h2><h2 id="JavaScript在执行的过程中，浏览器的js引擎会将代码扫描一遍-预解析-并把-声明式-函数-和-变量-提升到-该作用域-的最顶端"><a href="#JavaScript在执行的过程中，浏览器的js引擎会将代码扫描一遍-预解析-并把-声明式-函数-和-变量-提升到-该作用域-的最顶端" class="headerlink" title="JavaScript在执行的过程中，浏览器的js引擎会将代码扫描一遍(预解析) 并把 **声明式** 函数 和 变量 提升到 **该作用域** 的最顶端"></a><code>JavaScript在执行的过程中，浏览器的js引擎会将代码扫描一遍(预解析) 并把 **声明式** 函数 和 变量 提升到 **该作用域** 的最顶端</code></h2><h4 id="1-变量预解析"><a href="#1-变量预解析" class="headerlink" title="1. 变量预解析"></a>1. 变量预解析</h4><blockquote><p>变量预解析只会将变量的声明提升到该作用域的最前面</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">console.log(a) // undefined</span><br><span class="line">var a = 10;</span><br><span class="line">=&gt;</span><br><span class="line">var a </span><br><span class="line">console.log(a) // undefined</span><br><span class="line">a = 10</span><br></pre></td></tr></table></figure><h4 id="2-函数预解析"><a href="#2-函数预解析" class="headerlink" title="2. 函数预解析"></a>2. 函数预解析</h4><blockquote><p>变量预解析只会将变量的声明提升到该作用域的最前面</p></blockquote><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">b()</span><br><span class="line">function b()&#123;</span><br><span class="line">&#125;</span><br><span class="line">=&gt;</span><br><span class="line">function b()&#123;</span><br><span class="line">&#125;</span><br><span class="line">b()</span><br></pre></td></tr></table></figure><hr><h2 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h2><p><code>直接在浏览器中Sources添加断点</code></p><h2 id="或者在编辑器中在语句之后添加-debugger"><a href="#或者在编辑器中在语句之后添加-debugger" class="headerlink" title="或者在编辑器中在语句之后添加 debugger"></a><code>或者在编辑器中在语句之后添加 debugger</code></h2><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><hr><h4 id="什么是数据类型？"><a href="#什么是数据类型？" class="headerlink" title="什么是数据类型？"></a>什么是数据类型？</h4><blockquote><p>计算机里面有很多数据，JS为了方便调试与使用，提供了一些对应的辅助方法，将它们做了归类，就是数据类型。</p></blockquote><hr><h4 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h4><hr><h5 id="1-Number"><a href="#1-Number" class="headerlink" title="1. Number"></a>1. Number</h5><p>1.1. <strong>整数</strong> =&gt; 正数 负数<br>1.2. <strong>小数</strong><br>1.3. <strong>NaN</strong><br>  <em>Not a Number =&gt; 不是一个数字</em><br>  判断一个数字是否是非数字<code>isNaN(x)</code> 返回布尔值 <strong>true</strong>是一个非数字，<strong>false</strong>不是一个非数字<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isNaN(undefined) // true</span><br><span class="line">isNaN(null) // false</span><br></pre></td></tr></table></figure></p><blockquote><p>NaN不等于任何值，包括它自己</p></blockquote><ul><li><p>数值的取之范围</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Infinity // 无穷大</span><br><span class="line">-Infinity // 无穷小</span><br><span class="line">Number.MAX_VALUE /*最大值*/</span><br><span class="line">Number.MIN_VALUE /*最小值*/</span><br></pre></td></tr></table></figure></li><li><p>运算符<br>算数运算符</p><blockquote><p>+:加<br>-:减<br><em>:乘<br>/:除<br>%:求模<br>任何数除以0为无穷大<br>任何数`-</em>/%`字符串为NaN (除了+)</p></blockquote></li></ul><p>复合运算符</p><blockquote><p>+= &lt;a+=1 =&gt; a = a+1&gt;<br>-= &lt;a-=1 =&gt; a = a-1&gt;<br> “<em>=” &lt;a</em>=1 =&gt; a = a*1&gt; (乘等于)<br>/= &lt;a/=1 =&gt; a = a/1&gt;<br>“%=” &lt;a%=1 =&gt; a = a%1&gt;</p></blockquote><p>“==||===”<br>两个等于和三个等于的区别<br>两个等于只对比值 三个等于对比值和数据类型</p><p>自增自减运算符<br><code>a++++aa----a</code></p><ul><li>前置自增 ++a <code>先运算、再返回</code></li><li>后置自增 a++ <code>先返回、再运算</code></li></ul><hr><h5 id="2-String"><a href="#2-String" class="headerlink" title="2. String"></a>2. String</h5><p>2.1 字符串的长度<code>str.length</code></p><h2 id="2-2-字符串加号运算-会将数据与数据拼接字符串-任何数据类型-拼接之后的新的字符串"><a href="#2-2-字符串加号运算-会将数据与数据拼接字符串-任何数据类型-拼接之后的新的字符串" class="headerlink" title="2.2 字符串加号运算 会将数据与数据拼接字符串 + 任何数据类型 = 拼接之后的新的字符串"></a>2.2 字符串加号运算 会将数据与数据拼接<code>字符串 + 任何数据类型 = 拼接之后的新的字符串</code></h2><h5 id="3-Boolean"><a href="#3-Boolean" class="headerlink" title="3. Boolean"></a>3. Boolean</h5><p><code>true =&gt; 1</code><br><code>false =&gt; 0</code></p><blockquote><p>用布尔值来判断条件真假</p></blockquote><hr><h5 id="4-Undefined"><a href="#4-Undefined" class="headerlink" title="4. Undefined"></a>4. Undefined</h5><p>未定义</p><hr><h5 id="5-Null"><a href="#5-Null" class="headerlink" title="5. Null"></a>5. Null</h5><p>空</p><hr><ul><li>undefined和null的区别<blockquote><p>null 表示一个值被定义了，定义为null<br>undefined 表示一个值声明了 但是未定义(未赋值)<br>所以设置一个值为null是合理的 设置一个值为undefined是不合理的<br>null == undefined // true<br>null === undefined // false<br>说明 null 和 undefined 在转boolean 的时候都为 0 值相同 所以 == 为true  ，数据类型不一样 === 为false</p></blockquote></li></ul><hr><h4 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h4><hr><h5 id="1-Array"><a href="#1-Array" class="headerlink" title="1. Array"></a>1. Array</h5><ul><li>创建数组的方式</li></ul><p><code>new</code><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new Array()</span><br><span class="line">new Array(初始长度)</span><br><span class="line">new Array( 1 , 2 , 3 )</span><br></pre></td></tr></table></figure></p><p><code>字面量</code><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ ]</span><br><span class="line">[ 1 , 2 , 3 ]</span><br></pre></td></tr></table></figure></p><ul><li>数组的三个概念<blockquote><p>元素: 数组中的值就是元素<br>下标(索引): 下标从0开始<br>长度: length 数组的长度 从1开始</p></blockquote></li><li>遍历数组</li></ul><p><code>正叙遍历</code><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(let i = 0; i &lt; arr.length; i++)&#123;</span><br><span class="line">  /*代码块*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>倒叙遍历</code><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(let i = arr.length; i &gt; 0; i--)&#123;</span><br><span class="line">  /*代码块*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>栈和队列操作</li></ul><p><code>栈操作 先进后出</code><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr.unshift() /*从头部放入*/</span><br><span class="line">arr.shift() /*从头部取出*/</span><br></pre></td></tr></table></figure></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr.push(); /*从尾部放入*/</span><br><span class="line">arr.pop(); /*从尾部取出*/</span><br></pre></td></tr></table></figure><p><code>队列操作 先进先出</code><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr.unshift() /*从头部放入*/</span><br><span class="line">arr.pop(); /*从尾部取出*/</span><br></pre></td></tr></table></figure></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr.push(); /*从尾部放入*/</span><br><span class="line">arr.shift() /*从头部取出*/</span><br></pre></td></tr></table></figure><hr><h5 id="2-Function"><a href="#2-Function" class="headerlink" title="2. Function"></a>2. Function</h5><ul><li>函数的声明</li></ul><p><code>声明式创建函数</code><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function fn ()&#123;</span><br><span class="line">  //代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>匿名方式创建函数</code><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let fn = function()&#123;</span><br><span class="line">  //代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>函数对象</code><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let fn = new Function(&quot;形参&quot;,&quot;形参&quot;,&quot;代码块&quot;) /*前面的都是参数，最后面的参数是代码块*/</span><br></pre></td></tr></table></figure></p><ul><li>函数的默认值<br><code>形参默认值 形参 = 形参 || 默认值</code></li><li>函数的调用<br><code>函数名(实参列表)</code></li><li>return 关键字<blockquote><p>函数中 return 将数据给调用者<br>函数中遇到 return 直接跳出函数 后面代码不执行<br>函数默认 return undefined</p></blockquote></li><li><p>函数的预解析</p><blockquote><p>只有声明式的函数和变量才会预解析<br>先调用 -&gt; 后声明<br>在js执行的时候 浏览器会执行 预解析的操作<br><code>预解析会把所有的 声明式 创建的函数(包括变量) 提升到当前作用域的最顶端</code></p></blockquote></li><li><p>回调函数<br><code>函数作为参数传递</code><br><code>函数作为返回值</code></p></li><li><p>arguments 属性</p><blockquote><p>函数内部的特殊属性 用来保存实参列表<br>arguments 是一个 <code>伪数组</code> =&gt; 不是数组 但是具有数组的特性(下标索引、长度、可以进行循环遍历)<br>可以模拟函数重载 =&gt; 同一个函数，因为传递的实参数量不同，可以执行不同的操作</p></blockquote></li><li>工厂函数 和 构造函数<figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/*工厂函数*/</span><br><span class="line">function createStr(name,age)&#123;</span><br><span class="line">  let obj = new Object()</span><br><span class="line">  obj.name = name</span><br><span class="line">  obj.age = age</span><br><span class="line">  obj.sayHi = function()&#123;</span><br><span class="line">    console.log(this.obj)</span><br><span class="line">  &#125;</span><br><span class="line">  return obj</span><br><span class="line">&#125;</span><br><span class="line">let obj1 = createStr(&quot;蓝海&quot;,11)</span><br></pre></td></tr></table></figure></li></ul><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/*构造函数*/</span><br><span class="line">function StuInFo(name,age)&#123;</span><br><span class="line">  this.name = name</span><br><span class="line">  this.age = age</span><br><span class="line">  this.sayHi = function()&#123;</span><br><span class="line">    console.log(this.obj)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">let obj2 = new StuInFo(&quot;蓝海&quot;,11)</span><br></pre></td></tr></table></figure><blockquote><p>构造函数相对于自定义类(class)<br>1.变量名一般用名词，首字母大写<br>2.构造函数中 不需要我们去创建对象、返回对象<br>3.构造函数一般 被 new 关键词调用</p></blockquote><blockquote><p>new 关键字 做的四件事</p><ol><li>创建空对象</li><li>将空对象 传递给 构造函数 里面的 this</li><li>调用构造函数</li><li>返回对象</li></ol><ul><li>自调用函数<br>声明的时候直接调用执行<figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(function(&quot;形参列表&quot;)&#123;</span><br><span class="line">  /*代码块*/</span><br><span class="line">&#125;)(&quot;实参列表&quot;)</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li>函数内存存放<br><code>函数名存放在栈里面</code><br><code>通过内存地址相关联</code><br><code>函数体和形参列表存放在堆里面</code></li></ul><hr><h5 id="3-Object"><a href="#3-Object" class="headerlink" title="3. Object"></a>3. Object</h5><ul><li>创建对象的方式</li></ul><p><code>new</code><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let obj = new Object()</span><br><span class="line">||</span><br><span class="line">let obj = new Object(&#123;</span><br><span class="line">  name : &quot;蓝海&quot;,</span><br><span class="line">  age : 11</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><code>字面量</code><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let obj = &#123; &#125;</span><br><span class="line">||</span><br><span class="line">let obj = &#123;</span><br><span class="line">  name : &quot;蓝海&quot;,</span><br><span class="line">  age : 11</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>访问对象中的属性<br><code>对象.属性</code><br><code>对象[&quot;属性&quot;]</code> =&gt; 注意 用中括号的方式访问对象中的属性 属性名🉐️加引号<br><code>访问对象中不存在的属性</code> =&gt; undefined</li><li>对象属性操作<br><code>添加属性</code> =&gt; 直接对象 . 属性名 = 属性值<br><code>删除属性</code> =&gt;  delete 对象 . 属性名 || delete 对象 . 方法名</li><li>判断一个对象中是否存在某个属性或某个方法<br><code>&quot;属性&quot; in 对象</code> =&gt; <code>&quot;name&quot; in obj</code></li><li>对象中的 this <blockquote><p>对象中的this就是这个对象 可以通过this.属性名 在对象的方法中访问对象里的其他属性或方法</p></blockquote></li><li>对象内存存放<br><code>对象名存放在栈里面</code><br><code>通过内存地址相关联</code><br><code>对象里面的方法和属性存放在堆里面</code></li></ul><hr><h2 id="获取数据类型"><a href="#获取数据类型" class="headerlink" title="获取数据类型"></a>获取数据类型</h2><h4 id="1-typeof"><a href="#1-typeof" class="headerlink" title="1. typeof"></a>1. typeof</h4><p><code>typeof</code>检查简单数据类型[值类型] 返回的是 字符串类型的数据类型<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">typeof(123) =&gt; &quot;number&quot;</span><br><span class="line">/*注意点*/</span><br><span class="line">typeof(typeof(123)) =&gt; &quot;string&quot;</span><br><span class="line">typeof(null) =&gt; &quot;object&quot;</span><br><span class="line">typeof(Infinity) =&gt; &quot;number&quot;</span><br><span class="line">typeof(NaN) =&gt; &quot;number&quot;</span><br><span class="line">typeof(new Date()) =&gt; &quot;object&quot; =&gt; /*typeof检查其他new出来的对象 都返回 object*/</span><br><span class="line">/*typeof() 复杂数据类型object、array 和 null 都返回 object</span><br><span class="line">  typeof(function) =&gt; function // 函数除外</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></p><h4 id="2-instanceof"><a href="#2-instanceof" class="headerlink" title="2. instanceof"></a>2. instanceof</h4><p><code>instanceof</code>检查复杂数据类型[引用类型] 返回boolean值<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据名 instanceof 数据类型 /*[Function||Object||Array]*/</span><br><span class="line">返回 false 或 true</span><br><span class="line">只能检查复杂数据类型 简单数据类型都返回false</span><br></pre></td></tr></table></figure></p><h4 id="typeof-和-instanceof-的区别"><a href="#typeof-和-instanceof-的区别" class="headerlink" title="typeof  和 instanceof 的区别"></a>typeof  和 instanceof 的区别</h4><p><code>typeof</code>用来检测简单数据类型 返回值是一个字符串的数据类型</p><h2 id="instanceof用来检测复杂数据类型-返回的是boolean值-如果用来检测简单数据类型都会返回false"><a href="#instanceof用来检测复杂数据类型-返回的是boolean值-如果用来检测简单数据类型都会返回false" class="headerlink" title="instanceof用来检测复杂数据类型 返回的是boolean值 如果用来检测简单数据类型都会返回false"></a><code>instanceof</code>用来检测复杂数据类型 返回的是boolean值 如果用来检测简单数据类型都会返回false</h2><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><hr><h4 id="1-转换为字符串"><a href="#1-转换为字符串" class="headerlink" title="1. 转换为字符串"></a>1. 转换为字符串</h4><p><code>str.tostring()</code> <em>默认模式</em>把变量转换为字符串 || <em>基模式</em><br><code>String(str)</code> 把特殊值转换为字符串 String(undefined) =&gt; “undefined”<br><code>加号拼接字符串</code></p><h4 id="2-转换为数组"><a href="#2-转换为数组" class="headerlink" title="2. 转换为数组"></a>2. 转换为数组</h4><p><code>parseFloat(str)</code> 把字符串转换为浮点数(小数)<br><code>parseInt(str)</code> 把字符串转换为整数</p><p>{<code>Number(str)</code> 任何数据转换为整数</p><blockquote><p>如果字符串截去开头和结尾的空白字符后，<br>不是纯数字字符串，那么最终返回NaN。<br>如果字符串中只包含了数字，(包括前面带正号和负号)，<br>则将其转换为十进制数值，即”1”-&gt;1，”011“-&gt;11<br>如果字符串是空的””则返回0<br>如果字符串包含除了上面的格式之外的字符，则将其转换为NaN<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">boolean  true转换为1 false转换为0</span><br><span class="line">null 返回 0</span><br><span class="line">undefined 返回 NaN</span><br></pre></td></tr></table></figure></p></blockquote><p>}</p><h4 id="3-转换为布尔值"><a href="#3-转换为布尔值" class="headerlink" title="3. 转换为布尔值"></a>3. 转换为布尔值</h4><p><code>Boolean()</code> </p><blockquote><p>将布尔字符串转成布尔值<br>除了 0、false 、undefiend、NaN、null 转换为false  其他都为true</p></blockquote><h4 id="4-转义符"><a href="#4-转义符" class="headerlink" title="4. 转义符"></a>4. 转义符</h4><p><code>console.log(&quot;转义符的应用\&quot;嗯&quot;) -&gt;[转义符的应用“嗯]</code><br><em>常用</em></p><ul><li>\n 换行符</li><li>\” 双引号</li><li>\’ 单引号</li><li>\ \ 斜杠\</li></ul><hr><h2 id="JavaScript内置对象"><a href="#JavaScript内置对象" class="headerlink" title="JavaScript内置对象"></a>JavaScript内置对象</h2><p><a href="https://www.jianshu.com/p/861983d569f3" target="_blank" rel="noopener">戳一下👇</a> 之前总结的常用内置对象博客</p><hr><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p><em>一些很简单条件判断这里就不说了哈</em> 😶</p><h4 id="1-三元运算符"><a href="#1-三元运算符" class="headerlink" title="1. 三元运算符"></a>1. 三元运算符</h4><p><code>条件 ? true : false</code></p><h4 id="2-switch-case"><a href="#2-switch-case" class="headerlink" title="2. switch-case"></a>2. switch-case</h4><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/*相对于 if (a === 1) 用来做全等判断*/</span><br><span class="line">break /*每个case里面的代码断都要写 break 否则会穿透*/</span><br><span class="line">/*合理使用switch穿透 &lt;当多个case要执行的代码需求一样的时候&gt;*/</span><br><span class="line">default /*如果case都不匹配的情况下 会执行 default 里面的代码*/</span><br></pre></td></tr></table></figure><h4 id="3-amp-amp"><a href="#3-amp-amp" class="headerlink" title="3. &amp;&amp; || !"></a>3. &amp;&amp; || !</h4><p><code>&amp;&amp;</code> 与 一假则假<br><code>||</code> 或 一真则真</p><h2 id="非-取反"><a href="#非-取反" class="headerlink" title="! 非 取反"></a><code>!</code> 非 取反</h2><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><hr><h4 id="1-for"><a href="#1-for" class="headerlink" title="1. for"></a>1. for</h4><p><em>for 循环体上面的 i 变量的作用域是全局作用域 如果在函数中使用就是局部作用域 一般建议使用let 关键词来声明 i</em><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for (let i = 1;i &lt; 10; i++)&#123;</span><br><span class="line">  /*代码块*/</span><br><span class="line">&#125;</span><br><span class="line">/*拆解为*/</span><br><span class="line">let i = 1;</span><br><span class="line">for(;i&lt;10;)&#123;</span><br><span class="line">  /*代码块*/</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-do-while"><a href="#2-do-while" class="headerlink" title="2. do while"></a>2. do while</h4><p><code>先执行do里面的代码块 再条件判断</code><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">do&#123;</span><br><span class="line">  /*代码块*/</span><br><span class="line">&#125;while(boolean)</span><br></pre></td></tr></table></figure></p><h4 id="3-while"><a href="#3-while" class="headerlink" title="3. while"></a>3. while</h4><p><code>先条件判断 再执行代码块</code><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while(boolean)&#123;</span><br><span class="line">  /*代码块*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="do-while-与-while-的区别"><a href="#do-while-与-while-的区别" class="headerlink" title="do-while 与 while 的区别"></a>do-while 与 while 的区别</h5><blockquote><p>do-while 不管条件是否成立 都会执行一次do里面的代码块 然后再进行条件判断<br>while 先进行条件判断 再执行代码块</p></blockquote><h4 id="3-for-in"><a href="#3-for-in" class="headerlink" title="3. for in"></a>3. for in</h4><p><code>遍历对象</code><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for(let &quot;属性名&quot; in &quot;对象&quot;)&#123;</span><br><span class="line">  /*访问对象中的属性或方法*/ /*这里的属性名已经是string类型 所以无需再加引号*/</span><br><span class="line">  obj[name] =&gt; /*对象[属性名]*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="break-和-continue-的区别"><a href="#break-和-continue-的区别" class="headerlink" title="break 和 continue 的区别"></a>break 和 continue 的区别</h5><blockquote><p>break 跳出整个循环 后面的循环不再执行</p></blockquote><h2 id="continue-跳出本次循环-继续执行后面的循环"><a href="#continue-跳出本次循环-继续执行后面的循环" class="headerlink" title="continue 跳出本次循环 继续执行后面的循环"></a>continue 跳出本次循环 继续执行后面的循环</h2><p><img src="https://upload-images.jianshu.io/upload_images/12946880-a93529cf1a80804e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="xmind知识导图"><br><em>部分很简单的知识点未写入博客</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;本篇讲解ecma语法&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;JavaScript是什么-？&quot;&gt;&lt;a href=&quot;#JavaScript是什么-？&quot; class=&quot;headerlink&quot; title=&quot;JavaScript是什么 ？&quot;&gt;&lt;/a&gt;JavaScript是什么 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webAPI</title>
    <link href="http://yoursite.com/2019/05/24/webAPI/"/>
    <id>http://yoursite.com/2019/05/24/webAPI/</id>
    <published>2019-05-23T16:25:00.135Z</published>
    <updated>2019-05-24T02:29:11.716Z</updated>
    
    <content type="html"><![CDATA[<p>本篇讲解页面中的一些api与用法和兼容</p><p>🤪</p><h2 id="一、什么是webAPI"><a href="#一、什么是webAPI" class="headerlink" title="一、什么是webAPI?"></a>一、什么是webAPI?</h2><ul><li>web: 网页</li><li>API: 接口 一套别人封装的属性和方法</li><li>webAPI: 专门操作网页的方法和属性<br><code>万物皆对象，在webAPI中把网页中所有元素 &lt;element&gt; 都当成对象来处理</code></li></ul><hr><h2 id="二、文档树"><a href="#二、文档树" class="headerlink" title="二、文档树"></a>二、文档树</h2><h3 id="2-1-三个部分"><a href="#2-1-三个部分" class="headerlink" title="2.1 三个部分"></a>2.1 三个部分</h3><ul><li>文档: document</li><li>元素: 网页中的标签</li><li>节点: 网页中所有的内容都叫节点(包括标签、属性、文本、注释)<h3 id="2-2-节点的三个属性"><a href="#2-2-节点的三个属性" class="headerlink" title="2.2 节点的三个属性"></a>2.2 节点的三个属性</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. nodeType(节点类型)</span><br><span class="line">2. nodeName(节点名字)</span><br><span class="line">3. nodeValue(节点值)</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-2-1-元素节点"><a href="#2-2-1-元素节点" class="headerlink" title="2.2.1 元素节点"></a>2.2.1 元素节点</h4><p><code>元素节点就是标签节点</code></p><ol><li>nodeType: 1</li><li>nodeName: 标签名(大写) </li><li>nodeValue: null</li></ol><h4 id="2-2-2-属性节点"><a href="#2-2-2-属性节点" class="headerlink" title="2.2.2 属性节点"></a>2.2.2 属性节点</h4><p><code>属性包括属性名和属性值</code></p><ol><li>nodeType: 2</li><li>nodeName: 属性名</li><li>nodeValue: 属性值</li></ol><h4 id="2-2-3-文本节点"><a href="#2-2-3-文本节点" class="headerlink" title="2.2.3 文本节点"></a>2.2.3 文本节点</h4><ol><li>nodeType: 3</li><li>nodeName: #text</li><li>nodeValue: 文本内容</li></ol><h4 id="2-2-4-注释节点"><a href="#2-2-4-注释节点" class="headerlink" title="2.2.4 注释节点"></a>2.2.4 注释节点</h4><ol><li>nodeType: 8</li><li>nodeName: #comment</li><li>nodeValue: 注释内容</li></ol><hr><h2 id="三、window对象"><a href="#三、window对象" class="headerlink" title="三、window对象"></a>三、window对象</h2><ul><li>window对象代表浏览器 </li><li>window对象是JavaScript中的顶级对象</li><li>任何<strong>全局变量</strong>和<strong>全局函数</strong>声明后 在预解析的过程中都会自动保存为window对象里面的属性和方法</li><li>window的两个特殊属性名不能再次声明!!<br><code>name: name属性名不管赋值任何值都会转换为字符串 let name = {}; -&gt; [object Object]</code><br><code>top</code></li><li>window的两个方法<figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">window.open(href); /*打开一个网页*/</span><br><span class="line">window.close(); /*关闭网页*/</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="四、事件"><a href="#四、事件" class="headerlink" title="四、事件"></a>四、事件</h2><h4 id="4-1-什么是事件"><a href="#4-1-什么是事件" class="headerlink" title="4.1 什么是事件?"></a>4.1 什么是事件?</h4><blockquote><p>在计算机中 事件代表捕捉了用户进行了什么操作 再给对应的事件处理</p></blockquote><h4 id="4-2-事件三大部分"><a href="#4-2-事件三大部分" class="headerlink" title="4.2 事件三大部分"></a>4.2 事件三大部分</h4><p><code>事件源 事件类型 事件处理函数</code></p><h5 id="4-2-1-事件源"><a href="#4-2-1-事件源" class="headerlink" title="4.2.1 事件源"></a>4.2.1 事件源</h5><blockquote><p>用户操作的是什么元素 事件中的this就是事件的事件源(谁触发这个事件那this就是谁)</p></blockquote><h5 id="4-2-2-事件类型"><a href="#4-2-2-事件类型" class="headerlink" title="4.2.2 事件类型"></a>4.2.2 事件类型</h5><blockquote><p>用户进行了什么操作</p></blockquote><h6 id="4-2-2-1-on"><a href="#4-2-2-1-on" class="headerlink" title="4.2.2.1 on"></a>4.2.2.1 on</h6><ul><li>onmouseover 鼠标移入</li><li>onmouseout 鼠标移出</li><li>window.onload 当页面加载完成后执行<br><code>入口函数 如果想将js代码写在html之前 就可以用这个事件 将js代码写在事件处理函数中</code></li><li>window.onunload 当页面退出前执行<br><code>可以保存用户信息 =&gt; 用户未保存信息直接退出网页</code></li><li>onfocus 获得焦点<br>文本框光标闪烁</li><li>onblur 失去焦点</li><li>onkeyup 键盘弹起</li><li>onkeydown 键盘按下</li><li>onscroll 滚动<br><code>当滚动页面滚动条时触发</code></li><li>onclick 点击<br><code>onclick 和 onmousedown 区别</code><br><code>onclick 按下弹起才触发</code><br><code>onmousedown 按下就会触发</code></li></ul><p><em>实现拖拽</em><br><em>要考虑元素是否有margin 移动的x和y🉐️减去元素原有的margin</em><br><em>给元素添加鼠标按下事件</em><br><em>在按下事件里面给页面添加鼠标移动事件</em><br><em>给元素注册鼠标弹起事件 =&gt; 清除页面鼠标移动事件</em></p><ul><li>onmousedown 鼠标按下</li><li>onmouseup 鼠标弹起</li><li>onmousemove 鼠标移动</li></ul><p><em>H5拖拽</em><br><em>需要为拖拽的元素添加 draggable = “true” 属性</em><br><strong>拖拽元素添加</strong></p><ul><li>ondragstart 拖拽开始</li><li>ondrag 拖拽中</li><li>ondragend 拖拽结束<br><strong>拖拽的目标元素添加</strong></li><li>ondropenter 有元素拖进来触发</li><li>ondropleave 有元素拖拽离开触发</li><li>ondropover 主要是为了配合ondrop使用，一定要在ondropover事件里调用<code>e.preventDefault()</code>才能让ondrop触发</li><li>ondrop 有元素拖到我范围内并松手才触发<h6 id="4-2-2-2-addEventListener"><a href="#4-2-2-2-addEventListener" class="headerlink" title="4.2.2.2 addEventListener()"></a>4.2.2.2 addEventListener()</h6>三参数<figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">事件名 不加on</span><br><span class="line">事件处理函数</span><br><span class="line">boolean值 是否事件捕捉</span><br><span class="line">*/</span><br><span class="line">el.addEventListener()</span><br></pre></td></tr></table></figure></li></ul><p>ie8 不支持 <code>addEventListener</code><br>两参数<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">事件名 加on</span><br><span class="line">事件处理函数</span><br><span class="line">*/</span><br><span class="line">el.attachEvent()</span><br></pre></td></tr></table></figure></p><h6 id="4-2-2-3-on事件和addEventListener-添加事件的区别"><a href="#4-2-2-3-on事件和addEventListener-添加事件的区别" class="headerlink" title="4.2.2.3 on事件和addEventListener 添加事件的区别"></a>4.2.2.3 <code>on事件和addEventListener 添加事件的区别</code></h6><blockquote><p>元素.on事件 = 处理函数<br>(添加事件 如果是同名事件，后面的事件处理函数会覆盖前面的)<br>元素.addEventListener()<br>(添加事件 不会覆盖之前的同名事件)</p></blockquote><h6 id="4-2-2-4-移除事件"><a href="#4-2-2-4-移除事件" class="headerlink" title="4.2.2.4 移除事件"></a>4.2.2.4 移除事件</h6><blockquote><p>用什么方式添加的事件就用什么方式移除事件</p><ul><li>on =&gt; null<figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">el.onclick = function()&#123;&#125;;</span><br><span class="line">// 移除</span><br><span class="line">el.onclick = null;</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li><p>addEventListener =&gt; removeEventListener<br><code>注意:如果addEventListener添加的事件的事件处理函数是匿名函数不能直接移除事件 只能移除命名事件 (ie8的 attachEvent 一样)</code></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">el.addEventListener(&quot;click&quot;,fn1)</span><br><span class="line">// 移除</span><br><span class="line">el.removeEventListener(&quot;click&quot;,fn1)</span><br></pre></td></tr></table></figure></li><li><p>attachEvent =&gt; detachEvent</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">el.attachEvent(&quot;onclick&quot;,f1)</span><br><span class="line">// 移除</span><br><span class="line">el.detachEvent(&quot;onclick&quot;,fn1)</span><br></pre></td></tr></table></figure></li></ul><h5 id="4-2-3-事件处理函数"><a href="#4-2-3-事件处理函数" class="headerlink" title="4.2.3 事件处理函数"></a>4.2.3 事件处理函数</h5><blockquote><p>用户操作后要执行的什么代码</p></blockquote><h6 id="4-2-3-1-事件对象-e"><a href="#4-2-3-1-事件对象-e" class="headerlink" title="4.2.3.1 事件对象 e"></a>4.2.3.1 事件对象 e</h6><ul><li>本质也是个对象</li><li>保存了事件触发时的相关信息</li><li>在事件处理函数中的形参里写参数 e<br>ie有兼容问题<br>兼容代码<code>e = e || window.event</code></li><li>三大坐标<blockquote><p>screen<br>e.screenX 和 e.screenY<br>获取的是点击的位置相对于屏幕左上角的坐标</p></blockquote></li></ul><blockquote><p>page<br>e.pageX,e.pageY<br>获得的是点击的位置相对于页面（文档）左上角的坐标<br>有兼容性的问题,IE8不支持，自己计算<br><code>pageX = e.clientX + 页面往左滚出去的距离 (scrollLeft)</code><br><code>pageY = e.clientY + 页面往上滚出去的距离 (scrollTop)</code></p></blockquote><blockquote><p>offset<br>e.offsetX,e.offsetY<br>获得是是点击的位置相当于事件源的左上角的位置<br>ie属性 有bug<br><code>offsetX = e.clientX - 盒子到可视区域的left (el.getBoundingClientRect.left)</code><br><code>offsetY = e.clientY - 盒子到可视区域的top (el.getBoundingClientRect.top)</code></p></blockquote><h6 id="4-2-3-2-this、e-target、e-currentTarget区别"><a href="#4-2-3-2-this、e-target、e-currentTarget区别" class="headerlink" title="4.2.3.2 this、e.target、e.currentTarget区别"></a>4.2.3.2 this、e.target、e.currentTarget区别</h6><blockquote><p>this 和 e.currentTarget 是一樣的<br>当前调用的是谁的事件 那么this就是谁<br>e.currentTarget ie8 不支持 =&gt; 直接用this</p></blockquote><blockquote><p>e.target 获取事件源(目标阶段) 正在触发事件的那个元素<br>ie8不支持 =&gt; e.target<br>兼容代码<br><code>var target = e.target || e.srcElement</code></p></blockquote><h4 id="4-3-事件的三大阶段"><a href="#4-3-事件的三大阶段" class="headerlink" title="4.3 事件的三大阶段"></a>4.3 事件的三大阶段</h4><h5 id="4-3-1-如何获取事件正在执行的阶段"><a href="#4-3-1-如何获取事件正在执行的阶段" class="headerlink" title="4.3.1 如何获取事件正在执行的阶段"></a>4.3.1 如何获取事件正在执行的阶段</h5><blockquote><p>在事件里可以通过 e.eventPhase 来捕获当前是哪个阶段<br>捕获 =&gt; 1<br>目标 =&gt; 2<br>冒泡 =&gt; 3</p></blockquote><h5 id="4-3-2-三大阶段"><a href="#4-3-2-三大阶段" class="headerlink" title="4.3.2 三大阶段"></a>4.3.2 三大阶段</h5><p><code>捕获 目标 冒泡</code></p><h6 id="4-3-2-1-捕获阶段"><a href="#4-3-2-1-捕获阶段" class="headerlink" title="4.3.2.1 捕获阶段"></a>4.3.2.1 捕获阶段</h6><blockquote><p>一种现象 与冒泡阶段相反 从window开始 依次一级一级往下调用子元素的同名事件，直到找到真正触发事件的事件源<br>事件捕获默认看不见 想要看到捕获阶段则需要通过 addEventListener来绑定事件，并且第三个参数传true</p></blockquote><h6 id="4-3-2-2-目标阶段"><a href="#4-3-2-2-目标阶段" class="headerlink" title="4.3.2.2 目标阶段"></a>4.3.2.2 目标阶段</h6><blockquote><p>找到真正触发事件的那个元素 -&gt; 事件源</p></blockquote><h6 id="4-3-2-3-冒泡阶段"><a href="#4-3-2-3-冒泡阶段" class="headerlink" title="4.3.2.3 冒泡阶段"></a>4.3.2.3 冒泡阶段</h6><blockquote><p>一种现象 当元素事件触发后 会从事件源开始依次一次一次往上调用父元素的同名事件，直到window<br>事件冒泡默认存在</p></blockquote><p><code>好处</code>：给父元素添加事件相当于给子元素添加了事件 -&gt; 事件委托 -&gt; e.target<br><code>带来的影响(坏处)</code>：如果子元素和父元素有同名事件 并且业务逻辑相反 则会冲突影响</p><h5 id="4-3-3-阶段顺序"><a href="#4-3-3-阶段顺序" class="headerlink" title="4.3.3 阶段顺序"></a>4.3.3 阶段顺序</h5><p><code>设置捕获</code></p><blockquote><p>先捕获 从window开始 依次一级一级调用子元素的同名事件<br>-&gt; 找到目标(真正触发事件的元素)<br>-&gt; 从目标元素开始 依次一级一级调用父元素的同名事件 直到window</p></blockquote><p><code>未设置捕获</code></p><blockquote><p>找到目标(真正触发事件的元素)<br>-&gt; 从目标元素开始 依次一级一级调用父元素的同名事件 直到window</p></blockquote><h5 id="4-3-4-阻止事件派发"><a href="#4-3-4-阻止事件派发" class="headerlink" title="4.3.4 阻止事件派发"></a>4.3.4 阻止事件派发</h5><p><em>阻止事件冒泡和阻止事件捕获</em><br><code>e.stopPropagation()</code></p><h2 id="ie8魔鬼不支持-ie8只有事件冒泡，没有事件捕获-gt-e-cancelBubble-true"><a href="#ie8魔鬼不支持-ie8只有事件冒泡，没有事件捕获-gt-e-cancelBubble-true" class="headerlink" title="ie8魔鬼不支持(ie8只有事件冒泡，没有事件捕获) =&gt; e.cancelBubble = true"></a>ie8魔鬼不支持(ie8只有事件冒泡，没有事件捕获) =&gt; <code>e.cancelBubble = true</code></h2><h2 id="五、本地存储"><a href="#五、本地存储" class="headerlink" title="五、本地存储"></a>五、本地存储</h2><p>只能存储字符串<br>查看本地存储 <code>浏览器F12-&gt;Application-&gt;Local || Session Storage-&gt;fille://</code></p><h3 id="5-1-localStorage-本地存储"><a href="#5-1-localStorage-本地存储" class="headerlink" title="5.1 localStorage 本地存储"></a>5.1 localStorage 本地存储</h3><blockquote><p>可以把数据存储到本地(浏览器) 只要用户不删除 则会一直保存 每个域名都是独立的保存数据 不同域名不能互相访问 长久保存数据可以存储到 localStorage</p><ul><li>保存数据 <code>localStorage.setItem(key,value)</code></li><li>获取数据 <code>localStorage.getItem(key)</code> =&gt; 如果没有这个数据 则返回 <code>null</code></li><li>删除一个数据 <code>localStorage.removeItem(key)</code></li><li>清空所有数据 <code>localStorage.clear()</code></li></ul></blockquote><h3 id="5-2-sessionStorage-会话存储"><a href="#5-2-sessionStorage-会话存储" class="headerlink" title="5.2 sessionStorage 会话存储"></a>5.2 sessionStorage 会话存储</h3><blockquote><p>短暂存储数据 可以多页面传值 相当于localStorage会更安全 浏览器关闭后就不会保存了</p><ul><li>保存数据 <code>sessionStorage.setItem(key,value)</code></li><li>获取数据 <code>sessionStorage.getItem(key)</code> =&gt; 如果没有这个数据 则返回 <code>null</code></li><li>删除一个数据 <code>sessionStorage.removeItem(key)</code></li></ul></blockquote><ul><li>清空所有数据 <code>sessionStorage.clear()</code></li></ul><hr><h2 id="六、定时器和延时器"><a href="#六、定时器和延时器" class="headerlink" title="六、定时器和延时器"></a>六、定时器和延时器</h2><p><em>给元素添加动画定时器 可以将定时器id直接给元素 <code>元素.timeId</code></em></p><h3 id="6-1-定时器"><a href="#6-1-定时器" class="headerlink" title="6.1 定时器"></a>6.1 定时器</h3><blockquote><p>每隔一段时间执行一段代码<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">参数一: 要执行的代码 可以写字符串 在字符串里面写js代码 或者写函数</span><br><span class="line">参数二: 间隔事件 单位是毫秒 1000毫秒 = 1秒</span><br><span class="line">*/</span><br><span class="line">window.setInterval()</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="6-2-延时器"><a href="#6-2-延时器" class="headerlink" title="6.2 延时器"></a>6.2 延时器</h3><blockquote><p>一段时间后执行一段代码<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">参数一: 要执行的代码 可以写字符串 在字符串里面写js代码 或者写函数</span><br><span class="line">参数二: 延迟事件 单位是毫秒 1000毫秒 = 1秒</span><br><span class="line">*/</span><br><span class="line">window.setTimeout()</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="6-3-清除定时器和延时器"><a href="#6-3-清除定时器和延时器" class="headerlink" title="6.3 清除定时器和延时器"></a>6.3 清除定时器和延时器</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clearInterval(定时器id)</span><br><span class="line">clearTimeout(延时器id)</span><br></pre></td></tr></table></figure><hr><h2 id="七、阻止a标签默认跳转三种方式"><a href="#七、阻止a标签默认跳转三种方式" class="headerlink" title="七、阻止a标签默认跳转三种方式"></a>七、阻止a标签默认跳转三种方式</h2><h3 id="7-1-href"><a href="#7-1-href" class="headerlink" title="7.1 href"></a>7.1 href</h3><p><code>将a标签的href的路径改为 javascript:void(0) || javascript:void(null) || 简写 javascript:</code></p><h3 id="7-2-return"><a href="#7-2-return" class="headerlink" title="7.2 return"></a>7.2 return</h3><p><code>给a标签添加点击事件 在事件处理函数的最后 return false</code></p><h3 id="7-3-事件对象-e"><a href="#7-3-事件对象-e" class="headerlink" title="7.3 事件对象 e"></a>7.3 事件对象 e</h3><p><code>阻止事件默认行为 e.preventDefault()</code></p><blockquote><p>return和事件对象e阻止跳转的区别<br>return后面的代码不执行</p></blockquote><h2 id="e-preventDefault-不会影响后面代码执行"><a href="#e-preventDefault-不会影响后面代码执行" class="headerlink" title="e.preventDefault()不会影响后面代码执行"></a>e.preventDefault()不会影响后面代码执行</h2><h2 id="八、排他思想"><a href="#八、排他思想" class="headerlink" title="八、排他思想"></a>八、排他思想</h2><blockquote><p>先把大家恢复成默认，再让自己特殊 <code>tab切换</code></p></blockquote><hr><h2 id="九、offset家族"><a href="#九、offset家族" class="headerlink" title="九、offset家族"></a>九、offset家族</h2><p><em>只能获取行内样式</em></p><blockquote><p>只能取值 (number) 不能赋值<br>offsetWidth 和 offsetHeight 获取包括padding和border和width||height </p></blockquote><h3 id="9-1-offsetWidth"><a href="#9-1-offsetWidth" class="headerlink" title="9.1 offsetWidth"></a>9.1 offsetWidth</h3><p><code>获取盒子的最终宽度</code></p><h3 id="9-2-offsetHeight"><a href="#9-2-offsetHeight" class="headerlink" title="9.2 offsetHeight"></a>9.2 offsetHeight</h3><p><code>获取盒子的最终高度</code></p><h3 id="9-3-offsetTop"><a href="#9-3-offsetTop" class="headerlink" title="9.3 offsetTop"></a>9.3 offsetTop</h3><p><code>获取自身上外边框到定位父级上内边框的距离</code></p><h3 id="9-4-offsetLeft"><a href="#9-4-offsetLeft" class="headerlink" title="9.4 offsetLeft"></a>9.4 offsetLeft</h3><p><code>获取自身左外边框到定位父级左内边框的距离</code></p><h2 id><a href="#" class="headerlink" title></a><img src="https://upload-images.jianshu.io/upload_images/12946880-a420cc3504d29078.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></h2><h2 id="十、scroll家族"><a href="#十、scroll家族" class="headerlink" title="十、scroll家族"></a>十、scroll家族</h2><blockquote><p>scrollWidth 和 scrollHeight 获取的包括了隐藏的部分 只能获取(number)不能修改<br>scrollLeft 和 scrollTop  可以获取也可以修改 想要滚动条滚动到最右变 直接赋值为 scrollWidth即可 </p></blockquote><h3 id="10-1-scrollWidth"><a href="#10-1-scrollWidth" class="headerlink" title="10.1 scrollWidth"></a>10.1 scrollWidth</h3><p><code>获取盒子内容的总宽度</code></p><h3 id="10-2-scrollHeight"><a href="#10-2-scrollHeight" class="headerlink" title="10.2 scrollHeight"></a>10.2 scrollHeight</h3><p><code>获取盒子内容的总高度</code></p><h3 id="10-3-scrollTop"><a href="#10-3-scrollTop" class="headerlink" title="10.3 scrollTop"></a>10.3 scrollTop</h3><p><code>获取内容上边滚出去的距离</code></p><h3 id="10-4-scrollLeft"><a href="#10-4-scrollLeft" class="headerlink" title="10.4 scrollLeft"></a>10.4 scrollLeft</h3><p><code>获取内容左边滚出去的距离</code></p><p><em>scrollTop和scrollLeft有兼容问题</em><br><em>兼容代码</em><br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var scrollTop = window.pageYOffset </span><br><span class="line">|| document.documentElement.scrollTop </span><br><span class="line">|| document.body.scrollTop </span><br><span class="line">|| 0;</span><br></pre></td></tr></table></figure></p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var scrollLeft = window.pageXOffset </span><br><span class="line">|| document.documentElement.scrollLeft </span><br><span class="line">|| document.body.scrollLeft </span><br><span class="line">|| 0;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/12946880-a20c414ee0057481.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><hr><h2 id="十一、client家族"><a href="#十一、client家族" class="headerlink" title="十一、client家族"></a>十一、client家族</h2><p><code>如果元素有滚动条 那么这个元素的可视宽度就是 整个盒子的宽度 - 滚动条的宽度</code></p><h3 id="11-1-clientWidth"><a href="#11-1-clientWidth" class="headerlink" title="11.1 clientWidth"></a>11.1 clientWidth</h3><p><code>获取可视区域的宽</code></p><h3 id="11-2-clientHeight"><a href="#11-2-clientHeight" class="headerlink" title="11.2 clientHeight"></a>11.2 clientHeight</h3><p><code>获取可视区域的高</code></p><h3 id="11-3-clientTop"><a href="#11-3-clientTop" class="headerlink" title="11.3 clientTop"></a>11.3 clientTop</h3><p><code>获取左边框的宽度</code></p><h3 id="11-4-clientLeft"><a href="#11-4-clientLeft" class="headerlink" title="11.4 clientLeft"></a>11.4 clientLeft</h3><p><code>获取上边看的宽度</code></p><hr><h2 id="十二、操作元素的方式"><a href="#十二、操作元素的方式" class="headerlink" title="十二、操作元素的方式"></a>十二、操作元素的方式</h2><h3 id="12-1-通过id获取元素"><a href="#12-1-通过id获取元素" class="headerlink" title="12.1 通过id获取元素"></a>12.1 通过id获取元素</h3><p><em>如果没有这个元素 则返回null 有则返回一个对象</em></p><blockquote><p>获取 id 只能通过document来获取</p></blockquote><p><code>document.getElementById(&quot;id&quot;)</code></p><h3 id="12-2-样式名获取元素"><a href="#12-2-样式名获取元素" class="headerlink" title="12.2 样式名获取元素"></a>12.2 样式名获取元素</h3><p><em>如果没有这个元素 则返回一个空集合[伪数组]</em><br><code>document.getElementsByClassName(&#39;class&#39;)</code></p><h4 id="12-2-1-什么是伪数组"><a href="#12-2-1-什么是伪数组" class="headerlink" title="12.2.1 什么是伪数组?"></a>12.2.1 什么是伪数组?</h4><ul><li>有下标索引、有元素、有长度 但是没有数组中的方法<h3 id="12-3-通过标签名来获取元素"><a href="#12-3-通过标签名来获取元素" class="headerlink" title="12.3 通过标签名来获取元素"></a>12.3 通过标签名来获取元素</h3><em>ie8魔鬼有兼容问题</em><br><code>document.getElementsByTagName(&quot;div&quot;)</code><h3 id="12-4-通过name属性来获取元素-表单元素"><a href="#12-4-通过name属性来获取元素-表单元素" class="headerlink" title="12.4 通过name属性来获取元素(表单元素)"></a>12.4 通过name属性来获取元素(表单元素)</h3><code>document.getElementsByName(&quot;name&quot;)</code><h3 id="12-5-通过css选择器来获取元素-h5新增"><a href="#12-5-通过css选择器来获取元素-h5新增" class="headerlink" title="12.5 通过css选择器来获取元素 (h5新增)"></a>12.5 通过css选择器来获取元素 (h5新增)</h3></li><li>获取的是一个对象 如果匹配到多个元素则返回第一个元素<br><code>document.querySelector(selectors)</code></li><li>获取的是一个伪数组<br><code>document.querySelectorAll(selectors)</code><h3 id="12-6-获取文档"><a href="#12-6-获取文档" class="headerlink" title="12.6 获取文档"></a>12.6 获取文档</h3><code>document</code><h3 id="12-7-获取html"><a href="#12-7-获取html" class="headerlink" title="12.7 获取html"></a>12.7 获取html</h3><code>document.documentElement</code><h3 id="12-8-获取head"><a href="#12-8-获取head" class="headerlink" title="12.8 获取head"></a>12.8 获取head</h3><code>document.head</code><h3 id="12-9-获取body"><a href="#12-9-获取body" class="headerlink" title="12.9 获取body"></a>12.9 获取body</h3><code>document.body</code><h3 id="12-10-获取子节点和子元素"><a href="#12-10-获取子节点和子元素" class="headerlink" title="12.10 获取子节点和子元素"></a>12.10 获取子节点和子元素</h3></li><li>子节点<br><code>el.childNodes</code></li><li>子元素<br><code>el.childNodes</code><h3 id="12-11-获取父节点和父元素"><a href="#12-11-获取父节点和父元素" class="headerlink" title="12.11 获取父节点和父元素"></a>12.11 获取父节点和父元素</h3><em>区别</em><blockquote><p>el.parentNode可以获取到document<br>el.parentElement不能获取到document<br>因为document不是一个元素</p></blockquote></li><li>父节点<br><code>el.parentNode</code></li><li>父元素<br><code>el.parentNode</code><h3 id="12-12-获取上一个兄弟节点和上一个兄弟元素"><a href="#12-12-获取上一个兄弟节点和上一个兄弟元素" class="headerlink" title="12.12 获取上一个兄弟节点和上一个兄弟元素"></a>12.12 获取上一个兄弟节点和上一个兄弟元素</h3></li><li>找到上一个兄弟节点(文本、注释、标签)，所有浏览器都支持<br><code>el.previousSibling</code></li><li>找到上一个兄弟元素(只会找到元素)，IE9以下都不支持<br><code>el.previousElementSibling</code><h3 id="12-13-获取下一个兄弟节点和下一个兄弟元素"><a href="#12-13-获取下一个兄弟节点和下一个兄弟元素" class="headerlink" title="12.13 获取下一个兄弟节点和下一个兄弟元素"></a>12.13 获取下一个兄弟节点和下一个兄弟元素</h3></li><li>找到下一个兄弟节点(文本、注释、标签)，所有浏览器都支持<br><code>el.nextSibling</code></li><li>找到下一个兄弟元素(只会找到元素)，IE9以下都不支持<br><code>el.nextElementSibling</code><h3 id="12-14-添加子元素"><a href="#12-14-添加子元素" class="headerlink" title="12.14 添加子元素"></a>12.14 添加子元素</h3><code>父元素.appendChild(&quot;子元素&quot;)</code><h3 id="12-15-删除子元素"><a href="#12-15-删除子元素" class="headerlink" title="12.15 删除子元素"></a>12.15 删除子元素</h3><code>父元素.removeChild(&quot;子元素&quot;)</code><h3 id="12-16-在某个子元素前面插入元素"><a href="#12-16-在某个子元素前面插入元素" class="headerlink" title="12.16 在某个子元素前面插入元素"></a>12.16 在某个子元素前面插入元素</h3><code>父元素.insertBefore(插入的新元素,要在哪个元素前面插入)</code><h3 id="12-17-替换子元素"><a href="#12-17-替换子元素" class="headerlink" title="12.17 替换子元素"></a>12.17 替换子元素</h3><code>父元素.replaceChild(新的元素,被替换的元素)</code></li></ul><hr><h2 id="十三、操作属性的另二种方式"><a href="#十三、操作属性的另二种方式" class="headerlink" title="十三、操作属性的另二种方式"></a>十三、操作属性的另二种方式</h2><h3 id="13-1-js-操作属性"><a href="#13-1-js-操作属性" class="headerlink" title="13.1 js 操作属性"></a>13.1 js 操作属性</h3><p><em>既可以操作自带属性，也可以操作自定义属性</em></p><ul><li>获取属性<br><code>el.getAttribute(&quot;属性名&quot;)</code></li><li>修改属性<br><code>el.setAttribute(&quot;属性名&quot;,&quot;属性值&quot;)</code></li><li>删除属性<br><code>el.removeAttribute(&quot;属性名&quot;)</code></li></ul><h3 id="13-2-h5-操作属性"><a href="#13-2-h5-操作属性" class="headerlink" title="13.2 h5 操作属性"></a>13.2 h5 操作属性</h3><blockquote><p>在自定义属性前面加 data-<br>如果自定义属性前面添加了 data-<br>那么这些自定义属性都会保存到el.dataset ‘对象’ 里面<br>想要取得属性直接遍历对象即可<br>取值时 data-会被去掉 并且如果后面还有-<br>会把后面的-也去掉 并把-后面的首字母大写(驼峰命名法)</p><ul><li>获得属性<br><code>el.dataset[&quot;shengao&quot;]</code><br><code>e.dataset.shengao</code></li><li>修改属性<br><code>el.dataset[&quot;shengao&quot;] = &quot;123cm&quot;</code></li><li>删除属性</li></ul></blockquote><h2 id="delete-el-dataset-quot-shengao-quot"><a href="#delete-el-dataset-quot-shengao-quot" class="headerlink" title="delete el.dataset[&quot;shengao&quot;]"></a><code>delete el.dataset[&quot;shengao&quot;]</code></h2><h2 id="十四、创建元素的三种方式"><a href="#十四、创建元素的三种方式" class="headerlink" title="十四、创建元素的三种方式"></a>十四、创建元素的三种方式</h2><ul><li>document.write()<blockquote><p>只能在body添加元素，并且会覆盖之前页面中的元素</p></blockquote></li><li>document.createElement()<blockquote><p>创建一个标签存在内存里面<br>再通过 父元素.appendChild(“创建出来的元素”) 渲染到页面<br>appendChild细节<br>给父元素追加一个元素，添加在最后，如果此元素已经存在，则被移动到最后</p></blockquote></li><li>el.innerHtml()<blockquote><p>为某元素添加内容，会覆盖原来的内容<br>+= 就只会追加不会覆盖<br>每次innerHtml赋值(+=)都是重新渲染，<br>所以有可能会让之前的元素丢失，<br>还会让之前元素的事件丢失(事件委托可解决)<br>渲染耗性能，大量资源浪费<br><code>先拼接字符串 再循环完了后一次性追加到页面中</code></p></blockquote></li></ul><hr><h2 id="十五、修改元素的属性"><a href="#十五、修改元素的属性" class="headerlink" title="十五、修改元素的属性"></a>十五、修改元素的属性</h2><h3 id="15-1-操作元素样式中的属性"><a href="#15-1-操作元素样式中的属性" class="headerlink" title="15.1 操作元素样式中的属性"></a>15.1 操作元素样式中的属性</h3><ul><li>获取<br><code>元素.style.样式名</code></li><li>修改<br><code>元素.style.样式名 = 样式值</code><br><em>注意</em><blockquote><p>样式名 如果在css 有 “-“ 的 应使用 驼峰命名法<br><code>background-color =&gt; backgroundColor</code></p></blockquote><h3 id="15-2-操作图片的路径"><a href="#15-2-操作图片的路径" class="headerlink" title="15.2 操作图片的路径"></a>15.2 操作图片的路径</h3></li><li>获取<br><code>元素.scr</code></li><li>修改<br><code>元素.scr = &quot;路径&quot;</code><h3 id="15-3-操作单标签按钮的文字"><a href="#15-3-操作单标签按钮的文字" class="headerlink" title="15.3 操作单标签按钮的文字"></a>15.3 操作单标签按钮的文字</h3></li><li>获取<br><code>元素.value</code></li><li>修改<br><code>元素.value = &quot;值&quot;</code><h3 id="15-4-操作元素的类名"><a href="#15-4-操作元素的类名" class="headerlink" title="15.4 操作元素的类名"></a>15.4 操作元素的类名</h3><h4 id="15-4-1-JavaScript"><a href="#15-4-1-JavaScript" class="headerlink" title="15.4.1 JavaScript"></a>15.4.1 JavaScript</h4></li><li>获取<br><code>元素.className</code></li><li>添加<br><code>元素.className += &quot; class&quot;</code><br><em>注意 用+= 得加空格</em><h4 id="15-4-2-HTML5"><a href="#15-4-2-HTML5" class="headerlink" title="15.4.2 HTML5"></a>15.4.2 HTML5</h4><blockquote><p>el.classList 返回的是一个伪数组 保存的是元素上的所有类名</p></blockquote></li><li>添加一个类<br><code>el.classList.add(&quot;class&quot;)</code></li><li>删除一个类<br><code>el.classList.remove(&quot;class&quot;)</code></li><li>修改一个类<br><code>el.classList.replace(&quot;被替换的类&quot;,&quot;要替换的新类&quot;)</code></li><li>切换一个类<br><code>el.classList.toggle(&quot;class&quot;)</code><br><em>没有就添加这个类 有就删除这个类</em></li><li>判断一个类是否存在<br><code>el.classList.contains(&quot;class&quot;)</code><br><em>存在返回true 不存在返回false</em><h3 id="15-5-操作元素显示or隐藏"><a href="#15-5-操作元素显示or隐藏" class="headerlink" title="15.5 操作元素显示or隐藏"></a>15.5 操作元素显示or隐藏</h3></li><li>显示<br><code>元素.style.displaye = &quot;block&quot;</code></li><li>隐藏<br><code>元素.style.displaye = &quot;none&quot;</code><br><em>如果想要通过一个按钮切换显示隐藏可以声明一个flag 记录显示和隐藏的状态</em><blockquote><p>let flag = this.value == “隐藏” ? true : false<br>divBox.style.display = flag ? “none” : “block”<br>this.value = flag ? “显示” : “隐藏” // 这里用来下一次<br>点击再次toggle 所以需要与设置的flag相反设定对应的值</p></blockquote></li></ul><h3 id="15-6-表单元素的禁用和启动"><a href="#15-6-表单元素的禁用和启动" class="headerlink" title="15.6 表单元素的禁用和启动"></a>15.6 表单元素的禁用和启动</h3><ul><li>el.style.disabled = true<blockquote><p>加上代表禁用 不加上代表启动<br>js里面设置它为 true 代表禁用、false 代表启用</p></blockquote></li></ul><h3 id="15-7-操作双标签的文字"><a href="#15-7-操作双标签的文字" class="headerlink" title="15.7 操作双标签的文字"></a>15.7 操作双标签的文字</h3><ul><li>获取<br><code>元素.innerText</code></li><li>修改<br><code>元素.innerText = &quot;值&quot;</code></li></ul><hr><h2 id="十六、innerHTML、innerText、textContent的区别"><a href="#十六、innerHTML、innerText、textContent的区别" class="headerlink" title="十六、innerHTML、innerText、textContent的区别"></a>十六、innerHTML、innerText、textContent的区别</h2><blockquote><p>innerHTML没有兼容问题 既可以拿到文本也可以渲染标签</p></blockquote><blockquote><p>innerText和textContent都是设置标签里面的文本内容<br>将数据当成字符串输出到页面 不会渲染<br>innerText在老版火狐里面不支持</p></blockquote><h2 id="textContent在ie9以下都不支持"><a href="#textContent在ie9以下都不支持" class="headerlink" title="textContent在ie9以下都不支持"></a>textContent在ie9以下都不支持</h2><h2 id="十七、表单元素属性"><a href="#十七、表单元素属性" class="headerlink" title="十七、表单元素属性"></a>十七、表单元素属性</h2><ul><li>value<br><code>可以获取大部分表单元素的内容(option除外)</code></li><li>type<br><code>可以获取表单元素的类型</code></li><li>disabled<br><code>禁用属性</code></li><li>checked<br><code>复选框选中</code></li><li>selected<br><code>下拉框选中</code></li></ul><hr><h2 id="十八、获取元素的最终样式"><a href="#十八、获取元素的最终样式" class="headerlink" title="十八、获取元素的最终样式"></a>十八、获取元素的最终样式</h2><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">window.getComputedStyle(element)[&quot;width&quot;]</span><br><span class="line">window.getComputedStyle(element).width</span><br></pre></td></tr></table></figure><p>返回的string属性值 “100px”<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/*ie8魔鬼专用*/</span><br><span class="line">element.currentStyle[&apos;width&apos;]</span><br></pre></td></tr></table></figure></p><hr><h2 id="十九、获取元素到可视区域的距离"><a href="#十九、获取元素到可视区域的距离" class="headerlink" title="十九、获取元素到可视区域的距离"></a>十九、获取元素到可视区域的距离</h2><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element.getBoundingClientRect()</span><br><span class="line">element.getBoundingClientRect().left</span><br><span class="line">element.getBoundingClientRect().top</span><br></pre></td></tr></table></figure><p><em>获取鼠标位置相对于自身的x和y</em><br>(offsetX和offsetY有bug)<br><code>e.clientX - 盒子到可视区域的left</code><br><code>e.clientY - 盒子到可视区域的top</code></p><hr><h2 id="XMind思维导图"><a href="#XMind思维导图" class="headerlink" title="XMind思维导图"></a>XMind思维导图</h2><p><img src="https://upload-images.jianshu.io/upload_images/12946880-a59e622e50b2a619.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="webAPI.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇讲解页面中的一些api与用法和兼容&lt;/p&gt;
&lt;p&gt;🤪&lt;/p&gt;
&lt;h2 id=&quot;一、什么是webAPI&quot;&gt;&lt;a href=&quot;#一、什么是webAPI&quot; class=&quot;headerlink&quot; title=&quot;一、什么是webAPI?&quot;&gt;&lt;/a&gt;一、什么是webAPI?&lt;/h
      
    
    </summary>
    
    
  </entry>
  
</feed>
